<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2D和3D的转换</title>
    <url>/2024/06/04/2D%E5%92%8C3D%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="3D变形"><a href="#3D变形" class="headerlink" title="3D变形"></a>3D变形</h2><ol>
<li>3D旋转<ul>
<li>将transform的属性设置为rotateX()或者rotateY()，即可实现绕横轴、纵轴旋转</li>
</ul>
</li>
<li>空间移动<ul>
<li>当元素进行3D旋转后，即可继续添加translateX()、translateY()、translateZ()属性让元素在空间进行移动</li>
</ul>
</li>
<li>perspective（景深）<ul>
<li>该属性用来定义透视强度，可以理解为“人眼到舞台的距离”，单位是px<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- div 是舞台，必须设置perperctive属性，p是演员，设置transform属性 --&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>transform-style（指定嵌套元素是怎样在三维空间中呈现。）<ul>
<li>preserve-3d 表示所有子元素在3D空间中呈现。</li>
<li>flat 表示所有子元素在2D平面呈现。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">       <span class="selector-tag">section</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">perspective</span>: <span class="number">10000px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">perspective</span>: <span class="number">10000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 设置变形类型，保留它内部的3D效果 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 这个盒子又是舞台，又是演员，这个box整体带着里面的p旋转 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>:all <span class="number">10s</span> ease <span class="number">0s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">section</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">360deg</span>) <span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">219</span>, <span class="number">56</span>, <span class="number">211</span>, <span class="number">0.486</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 前面 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">42</span>, <span class="number">128</span>, <span class="number">199</span>, <span class="number">0.486</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 顶面 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">56</span>, <span class="number">219</span>, <span class="number">83</span>, <span class="number">0.486</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 背面 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">180deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">213</span>, <span class="number">216</span>, <span class="number">32</span>, <span class="number">0.486</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 底面 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">236</span>, <span class="number">82</span>, <span class="number">102</span>, <span class="number">0.486</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 侧面 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">119</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">0.486</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 侧面 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="2D变形"><a href="#2D变形" class="headerlink" title="2D变形"></a>2D变形</h2><ol>
<li>旋转变形<ul>
<li>transform: rotate(45deg);</li>
<li>若角度为正，就是顺时针，否则就是逆时针</li>
<li>transform-origin 属性设置自己的自定义变换原点<ul>
<li>transform-origin: 50px 40px;</li>
</ul>
</li>
</ul>
</li>
<li>缩放变形<ul>
<li>transform: scale(3);</li>
<li>以中心点为原点缩放</li>
</ul>
</li>
<li>斜切变形<ul>
<li>transform: skew(10deg,20deg); 即可实现斜切变形</li>
<li>x的斜切角度，y的斜切角度</li>
</ul>
</li>
<li>位移变形IE9<ul>
<li>将 transform 属性设置为 translate ，即可实现位移变形<ul>
<li>transform: translate(200px,400px);</li>
</ul>
</li>
<li>和相对定位非常像，位移变形也会“老家留坑”，形影分离。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>5月最后一天，我开源了一个数据可视化大屏项目</title>
    <url>/2024/05/31/5%E6%9C%88%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9%EF%BC%8C%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%88%B0/</url>
    <content><![CDATA[<p>设计原型：<br><img src="/images/design.png" alt="大屏设计"><br>项目成果：<br><img src="/images/20240531110200.png" alt="项目成果"></p>
<p><strong>以上大屏数据为模拟数据</strong></p>
<p>脚手架命令：pnpm create vite my-react-app –template react-ts</p>
<h2 id="一、项目描述"><a href="#一、项目描述" class="headerlink" title="一、项目描述"></a>一、项目描述</h2><ul>
<li><p>一个基于 React、TypeScript、Vite、Redux、DataV、ECharts 框架的 “ <strong>数据大屏项目</strong> “。支持数据动态刷新渲染、屏幕适配、数据请求模拟、局部样式、图表自由替换&#x2F;复用等功能。</p>
</li>
<li><p>项目全屏展示点击右上角全屏按钮或（按 F11）。</p>
</li>
<li><p>项目环境：<a href="mailto:&#x72;&#x65;&#x61;&#x63;&#116;&#64;&#49;&#56;&#x2e;&#x32;&#46;&#48;">&#x72;&#x65;&#x61;&#x63;&#116;&#64;&#49;&#56;&#x2e;&#x32;&#46;&#48;</a>、<a href="mailto:&#x74;&#121;&#x70;&#101;&#x73;&#99;&#114;&#x69;&#112;&#116;&#x40;&#x35;&#x2e;&#x32;&#46;&#50;">&#x74;&#121;&#x70;&#101;&#x73;&#99;&#114;&#x69;&#112;&#116;&#x40;&#x35;&#x2e;&#x32;&#46;&#50;</a>、<a href="mailto:&#x76;&#105;&#x74;&#101;&#x40;&#53;&#46;&#50;&#46;&#x30;">&#x76;&#105;&#x74;&#101;&#x40;&#53;&#46;&#50;&#46;&#x30;</a>、<a href="mailto:&#x65;&#99;&#104;&#97;&#114;&#116;&#115;&#64;&#53;&#46;&#53;&#46;&#48;">&#x65;&#99;&#104;&#97;&#114;&#116;&#115;&#64;&#53;&#46;&#53;&#46;&#48;</a>、<a href="mailto:&#112;&#x6e;&#x70;&#109;&#x40;&#x37;&#46;&#x32;&#x37;&#46;&#x30;">&#112;&#x6e;&#x70;&#109;&#x40;&#x37;&#46;&#x32;&#x37;&#46;&#x30;</a>、<a href="mailto:&#110;&#111;&#x64;&#x65;&#x40;&#x76;&#49;&#54;&#x2e;&#x31;&#x38;&#x2e;&#x31;">&#110;&#111;&#x64;&#x65;&#x40;&#x76;&#49;&#54;&#x2e;&#x31;&#x38;&#x2e;&#x31;</a>。</p>
</li>
</ul>
<p>友情链接：</p>
<ol>
<li><a href="https://react.docschina.org/docs/introducing-jsx.html">React 官方文档</a></li>
<li><a href="https://geohub.amap.com/mapstyle/index">高德 自定义地图</a></li>
<li><a href="http://mockjs.com/">Mockjs 官方文档</a></li>
<li><a href="http://datav-react.jiaminghi.com/guide/">DataV 官方文档</a></li>
<li><a href="https://echarts.apache.org/examples/zh/index.html">echarts 实例</a>，<a href="https://echarts.apache.org/zh/api.html#echarts">echarts API文档</a></li>
</ol>
<h2 id="二、文件目录介绍"><a href="#二、文件目录介绍" class="headerlink" title="二、文件目录介绍"></a>二、文件目录介绍</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Project</span><br><span class="line">├─.eslintrc.cjs ----------- // eslint 配置</span><br><span class="line">├─.gitignore -------------- // git 控制文件</span><br><span class="line">├─custom.d.ts ------------- // 自定义类型声明</span><br><span class="line">├─index.html -------------- // 主页面</span><br><span class="line">├─mock -------------------- // 模拟数据</span><br><span class="line">├─package.json ------------ // 项目信息+依赖包</span><br><span class="line">├─pnpm-lock.yaml ---------- // 锁定依赖包</span><br><span class="line">├─README.md --------------- // 说明文档</span><br><span class="line">├─src </span><br><span class="line">│ ├─App.module.css </span><br><span class="line">│ ├─App.tsx --------------- // App 入口</span><br><span class="line">│ ├─assets ---------------- // 静态资源</span><br><span class="line">│ ├─components </span><br><span class="line">│ │ ├─AutoScale ----------- // 自动缩放 HOC</span><br><span class="line">│ │ ├─index.ts </span><br><span class="line">│ │ └─ScaleContainer ------ // 缩放容器 HOC</span><br><span class="line">│ ├─hooks </span><br><span class="line">│ │ └─useFullscreen.ts ---- // 控制全屏 Hooks</span><br><span class="line">│ ├─index.css </span><br><span class="line">│ ├─main.tsx -------------- // 主入口</span><br><span class="line">│ ├─redux ----------------- // redux 相关</span><br><span class="line">│ ├─services -------------- // 服务端相关配置文件</span><br><span class="line">│ ├─utils ----------------- // 工具函数</span><br><span class="line">│ ├─views ----------------- // 页面</span><br><span class="line">│ └─vite-env.d.ts </span><br><span class="line">├─tsconfig.json ----------- // ts 配置文件</span><br><span class="line">├─tsconfig.node.json ------ // node ts 配置文件</span><br><span class="line">└─vite.config.ts ---------- // vite 配置文件</span><br></pre></td></tr></table></figure>

<h2 id="三、详情介绍"><a href="#三、详情介绍" class="headerlink" title="三、详情介绍"></a>三、详情介绍</h2><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>需要提前安装好 <code>nodejs</code> 与 <code>pnpm</code>，下载项目后在项目主目录下运行 <code>pnpm install</code> 拉取依赖包，使用命令 <code>pnpm dev</code> 启动项目。</p>
<h3 id="数据请求模拟"><a href="#数据请求模拟" class="headerlink" title="数据请求模拟"></a>数据请求模拟</h3><p>项目采用 Mockjs 模拟数据方式，配置在 <code>mock</code> 文件夹中，Mockjs 使用方法请查阅 <a href="http://mockjs.com/">Mockjs文档</a>，主入口文件 main.tsx 引入 mock 文件。</p>
<p>接口 API 请求地址写在 <code>services/api.service.ts</code> 中，由 <code>@reduxjs/toolkit createAsyncThunk</code> 创建异步 Thunk 发起请求。</p>
<p>页面通过 <code>useDispatch</code> 发起请求，<code>useSelector</code> 接收数据。</p>
<h3 id="图表组件"><a href="#图表组件" class="headerlink" title="图表组件"></a>图表组件</h3><p>图表组件主要使用了 ECharts 和 DataV 可视化框架来进行开发。图表配置文件在 <code>views/components/*/options.ts</code> 中，数据由各个组件请求后导入。ECharts 渲染函数统一封装在了 <code>utils/chart.js</code> 中。</p>
<h3 id="样式编写"><a href="#样式编写" class="headerlink" title="样式编写"></a>样式编写</h3><p>样式编写使用了 <code>CSS in JS (JSS)</code> ，使样式具有组件级别的作用域，避免了全局样式污染的问题。<br>使用示例：</p>
<ol>
<li>将 css 文件名修改为 xxx.module.css</li>
<li>导入样式文件 import styles from ‘.&#x2F;xxx.module.css’</li>
<li>使用 styles.className</li>
<li>定义 ts 类型文件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// custom.d.ts</span></span><br><span class="line"> declare <span class="variable language_">module</span> <span class="string">&quot;*.css&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">css</span>: &#123; [<span class="attr">key</span>: string]: string &#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> css</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>vscode 安装插件：typescript-plugin-css-modules<ul>
<li>作用：解析 css 文件，并生成 ts 对应的类型</li>
<li>使用：在 tsconfig.json 配置 plugins 字段 [{“typescript-plugin-css-modules”}]</li>
<li>在 项目根目录创建 .vscode 文件夹  创建 settings.json 文件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// settings.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;typescript.tsdk&quot;</span>: <span class="string">&quot;node_modules/typescript/lib&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typescript.enablePromptUseWorkspaceTsdk&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="屏幕适配"><a href="#屏幕适配" class="headerlink" title="屏幕适配"></a>屏幕适配</h3><p>本项目借助 HOC 高阶组件包裹，将大屏限制在 1920x1080 尺寸。通过动态计算缩放比例，实时控制容器缩放大小，具体代码请参阅。<code>components/AutoScale</code> 和 <code>components/ScaleContainer</code> 组件。</p>
<p>在编写大屏代码时，样式无需转换，按照设计稿 1920x1080 <strong>1:1</strong> 编写即可。</p>
<h2 id="四、全屏控制"><a href="#四、全屏控制" class="headerlink" title="四、全屏控制"></a>四、全屏控制</h2><p>自定义 Hook（高阶组件）useFullscreen，用于控制页面全屏显示的功能，具体代码请参阅 <code>hooks/useFullscreen</code> 自定义钩子。</p>
<h2 id="五、其它"><a href="#五、其它" class="headerlink" title="五、其它"></a>五、其它</h2><p>这个项目是个人的作品，难免会有问题和 BUG。如果您发现任何问题，欢迎提出反馈和建议。我会尽力去更新和修复，并持续学习前端知识。非常感谢您的支持和理解！我很乐意与您交流，共同进步。</p>
<p><strong>GitHub 地址</strong><br><a href="https://github.com/zhihuzeye/react-screen-demo.git">GitHub 地址</a>：<a href="https://github.com/zhihuzeye/react-screen-demo.git">https://github.com/zhihuzeye/react-screen-demo.git</a></p>
]]></content>
      <categories>
        <category>开源项目</category>
      </categories>
      <tags>
        <tag>数据可视化大屏</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM</title>
    <url>/2024/06/13/DOM/</url>
    <content><![CDATA[<h2 id="DOM-基本概念"><a href="#DOM-基本概念" class="headerlink" title="DOM 基本概念"></a>DOM 基本概念</h2><ol>
<li>DOM 是操控 HTML和CSS的桥梁</li>
<li>DOM (Doucument Object Model) 文档对象类型，是Javascript操作HTML文档的接口，使文档操作变得非常优雅简便</li>
<li>DOM最大的特点是将文档表示为节点树</li>
</ol>
<h2 id="节点访问和位置关系"><a href="#节点访问和位置关系" class="headerlink" title="节点访问和位置关系"></a>节点访问和位置关系</h2><ol>
<li>访问元素节点<ul>
<li>访问元素节点的常用方法<ul>
<li><code>document.getElementById()</code><ul>
<li>通过id得到元素<ul>
<li>如果页面上有相同id的元素，则只能得到一个</li>
<li>不管元素藏得多深，都能把它找到</li>
<li>延迟运行<ul>
<li>通常JS 一定要写到HTML的节点后面，否则JS无法找到相应的HTML节点</li>
<li>可以使用 window.onload &#x3D; function(){} 事件 ,使页面加载完后再执行指定代码</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><code>document.getElementsByTagName()</code><ul>
<li>通过标签名称得到元素数组</li>
</ul>
</li>
<li><code>document.getElementsByClassName()</code><ul>
<li>通过类名得到元素数组</li>
</ul>
</li>
<li><code>document.querySelector()</code><ul>
<li>通过选择器得到元素</li>
</ul>
</li>
<li><code>document.querySelectorAll()</code><ul>
<li>通过选择器得到元素数组</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>节点的关系<ul>
<li>相对于父节点<ul>
<li>可以使用 farstChild  得到第一个子节点</li>
<li>可以使用 lastChild 得到最后一个子节点</li>
</ul>
</li>
<li>相对于子节点<ul>
<li>父节点可以通过使用 childNodes 得到所有的子节点信息</li>
<li>子节点可以通过 parentNode 来访问父节点</li>
<li>对于后面一个 兄弟节点 可以使用 nextSibling 获取</li>
<li>对于前面一个兄弟节点 可以使用 perviousSibling 获取前面一个</li>
</ul>
</li>
<li><strong>注意：文本节点也属于节点</strong><ul>
<li>文本节点也属于节点，使用节点关系时，一定要注意</li>
</ul>
</li>
<li>只考虑元素节点<ul>
<li>children</li>
<li>firstElementChild</li>
<li>lastElementChild</li>
<li>perviousElementSibling</li>
<li>nextElementSiling</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><ol>
<li>insertBefore<ul>
<li>父节点.insertBefore(孤儿节点,标杆节点);</li>
</ul>
</li>
<li>appendChild<ul>
<li>父节点.appendChild(内容)</li>
<li>在尾部追加</li>
</ul>
</li>
<li>改变元素节点的CSS样式<ul>
<li><code>oBox.style.fontSize  = &#39;32px&#39;</code></li>
</ul>
</li>
<li>改变元素的HTML的属性<ul>
<li>W3C 属性 直接，元素.属性 &#x3D; 属性值</li>
<li>非标准 W3C 属性 <ul>
<li>元素.setAttribute(key,value)</li>
<li>元素.getAttribute(key)</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="nodeType常用属性值"><a href="#nodeType常用属性值" class="headerlink" title="nodeType常用属性值"></a>nodeType常用属性值</h2><ul>
<li>1  <code>元素节点，例如&lt;p&gt; 和 &lt;div&gt;</code></li>
<li>3  <code>文字节点</code></li>
<li>8  <code>注释节点</code></li>
<li>9  <code>document节点</code></li>
<li>10  <code>DTD节点</code></li>
</ul>
<h2 id="节点的创建、移除和克隆"><a href="#节点的创建、移除和克隆" class="headerlink" title="节点的创建、移除和克隆"></a>节点的创建、移除和克隆</h2><ol>
<li>createElement<ul>
<li>创建一个指定tagname的HTML元素</li>
</ul>
</li>
<li>获取body节点<ul>
<li>document.body</li>
</ul>
</li>
<li>获取html节点<ul>
<li>document.documentElement</li>
</ul>
</li>
<li>移动节点<ul>
<li>新父节点.appendChild(已经有父亲的节点)</li>
<li>新父节点.insterBefore(已经有父亲的节点,标杆子节点)</li>
</ul>
</li>
<li>删除节点<ul>
<li>父节点.removeChild(要删除的子节点)</li>
<li><strong>节点不能主动删除自己，必须由父节点删除它</strong></li>
</ul>
</li>
<li>克隆节点<ul>
<li>cloneNode() 方法可以克隆节点，克隆出的节点是“孤儿节点”</li>
<li>var 孤儿节点 &#x3D; 老节点.cloneNode(true|false);</li>
<li>cloneNode 参数是一个布尔值，表示是否采用深度克隆；如果为true该节点的所有后代节点也都会被克隆，如果为false，则只克隆该节点本身</li>
</ul>
</li>
<li>访问元素节点<ul>
<li>所谓 ”访问“元素节点，就是指”得到“、”获取“页面上的元素节点。</li>
<li>访问元素节点 主要依赖于 document</li>
</ul>
</li>
</ol>
<h2 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h2><ol>
<li>事件监听<ul>
<li>什么是“事件监听”<ul>
<li>DOM允许我们书写Javascript代码以让HTML元素对事件做出反应</li>
<li>什么是”事件”：用户与网页的交互动作<ul>
<li>点用户点击元素的时候</li>
<li>点鼠标移动到元素的时候</li>
<li>当网页加载完成的时候…</li>
</ul>
</li>
<li>“监听”,顾名思义就是让计算机随时能够发现这个事件发生了，从而执行程序员预先编写的一些程序</li>
<li>设置事件监听的方法主要有 onxxx 和 addEventListener()</li>
</ul>
</li>
<li>常见鼠标事件监听<ul>
<li><code>onclick 当鼠标点击某个对象</code></li>
<li><code>ondblclick 当鼠标双击某个对象</code></li>
<li><code>onmousedown 当某个鼠标按键在某个对象上被按下</code></li>
<li><code>onmouseup 当某个鼠标按键在某个对象上被松开</code></li>
<li><code>onmousemove 当某个鼠标按键在某个对象上被移动</code></li>
<li><code>onmouseenter 当鼠标进入某个对象</code></li>
<li><code>onmouseleave 当鼠标离开某个对象</code></li>
</ul>
</li>
<li>常见的键盘事件监听<ul>
<li><code>onkeyperss 当某个键盘的键被按下（系统按钮如箭头键和功能键无法得到识别）</code></li>
<li><code>onkeydown 当某个键盘的键被按下（系统按钮可以识别，并且会优先onkeypress发生）</code></li>
<li><code>onkeyup 当某个键盘的键被松开</code></li>
</ul>
</li>
<li>常见的表单事件监听<ul>
<li><code>onchange 当用户改变域的内容</code></li>
<li><code>onfocus 当某个元素获得焦点（比如tab或鼠标点击）</code></li>
<li><code>onblur 当元素失去焦点</code></li>
<li><code>onsubmit 当表单被提交</code></li>
<li><code>onreset 当表单被重置 </code></li>
<li><code>oninput 当用户输入</code></li>
</ul>
</li>
<li>常见的页面事件监听<ul>
<li><code>onload 当页面或图像被完成加载</code></li>
<li><code>onunload  当用户退出页面</code></li>
</ul>
</li>
</ul>
</li>
<li>事件传播<ul>
<li>事件的传播是：先从外到内，然后再从内到外<ul>
<li>从外到内、捕获阶段（capturing phase）</li>
<li>从内到外、冒泡阶段（Bubbling phase）</li>
<li>onxxx 这样的写法只能监听冒泡阶段</li>
</ul>
</li>
<li>addEventListener() 方法<ul>
<li>DOM 0级：只能监听冒泡阶段<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box2.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是box2&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>DOM 2级事件监听<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">box1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><em><strong>true 监听捕获的阶段</strong></em></li>
<li><em><strong>false 监听冒泡阶段【默认】</strong></em></li>
</ul>
</li>
<li><strong>注意事项：最内部的元素不再区分捕获和冒泡阶段，会先执行写在前面的监听，然后执行后写的监听</strong></li>
<li><strong>注意事项：如果给元素设置相同的两个或多个同名事件，则DOM0级写法后面写的会覆盖先写的；而DOM2级会按照顺序执行</strong></li>
</ul>
</li>
</ul>
</li>
<li>事件对象<ul>
<li>什么是事件对象<ul>
<li>事件处理函数提供一个形式参数，它是一个对象，封装了本次事件的细节</li>
</ul>
</li>
<li>e.charCode 和 e.keyCode 属性<ul>
<li>e.charCode 属性通常用于 onkeypress 事件中，表示用户输入的字符的 “字符码”<ul>
<li><code>数字0 ~ 数字9  48 ~ 57</code></li>
<li><code>大写字母A ~ Z  65 ~ 90</code></li>
<li><code>小写字母 a ~ z  97 ~ 122</code></li>
</ul>
</li>
<li>e.keyCode 属性通常用于 onkeydown 事件和onkeyup中，表示用户按下按键的 “键码”<ul>
<li><code>数字0 ~ 数字9  48 ~ 57</code></li>
<li><code>字母部分大小写 a ~ z  65 ~ 90 （不区分大小写）</code></li>
<li><code>四个方向键（左、上、右、下）  37、38、39、40</code></li>
<li><code>回车键  13</code></li>
<li><code>空格键  32</code></li>
</ul>
</li>
</ul>
</li>
<li><em><strong>e.preventDefault() 方法</strong></em><ul>
<li>阻止事件产生的“默认动作”</li>
</ul>
</li>
<li><em><strong>e.stopPropagation() 方法</strong></em><ul>
<li>阻止事件继续传播</li>
<li>在一些场合，非常有必要切断事件继续传播，否则会造成页面特效显示出bug</li>
</ul>
</li>
<li>鼠标滚轮事件<ul>
<li>鼠标滚轮事件是 onmousewheel ，它的事件对象e提供deltaY 属性 表示鼠标滚动方向，向下滚动时返回正值，向上滚动时，返回负值。</li>
</ul>
</li>
</ul>
</li>
<li><strong>事件委托</strong><ul>
<li>批量添加事件监听的性能问题<ul>
<li>每一个事件监听注册都会消耗一定的系统内存，而批量添加事件会导致监听数量太多，内存消耗会非常大</li>
</ul>
</li>
<li>定义<ul>
<li>利用事件冒泡机制，将后台元素事件委托给祖先元素</li>
</ul>
</li>
<li>e.target 和 e.currentTarget 属性<ul>
<li>target<ul>
<li><em><strong>触发此事件的最早元素，即“事件源元素”</strong></em></li>
</ul>
</li>
<li>currentTarget<ul>
<li>事件处理程序附加到的元素</li>
</ul>
</li>
</ul>
</li>
<li>使用场景<ul>
<li>当有大量类似元素需要批量添加事件监听时，使用事件委托可以减少内存开销</li>
<li>当有动态元素节点上树时，使用事件委托可以让新上树的元素具有事件监听</li>
</ul>
</li>
<li>使用时注意事项<ul>
<li>onmouseenter 和 onmouseover 都表示“鼠标进入”，它们有什么区别呢？<ul>
<li>onmouseenter 不冒泡</li>
<li>onmouseover 冒泡</li>
</ul>
</li>
<li><em><strong>不能委托不冒泡的事件给祖先元素</strong></em></li>
<li>最内层的元素不能再有额外的内层元素了，比如<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS语法与变量</title>
    <url>/2024/06/14/JS%E8%AF%AD%E6%B3%95%E4%B8%8E%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h2><ol>
<li>alert</li>
<li>console</li>
</ol>
<h2 id="前端开发主要有哪些层，语言和功能是什么？"><a href="#前端开发主要有哪些层，语言和功能是什么？" class="headerlink" title="前端开发主要有哪些层，语言和功能是什么？"></a>前端开发主要有哪些层，语言和功能是什么？</h2><ol>
<li>HTML<ul>
<li>结构层  搭建骨架、描述页面语义</li>
</ul>
</li>
<li>CSS<ul>
<li>样式层</li>
</ul>
</li>
<li>Javascript<ul>
<li>行为层  表单验证、数据交互、数据收发等</li>
</ul>
</li>
</ol>
<h2 id="变量声明提升（面试题）"><a href="#变量声明提升（面试题）" class="headerlink" title="变量声明提升（面试题）"></a><strong>变量声明提升（面试题）</strong></h2><ol>
<li>你可以提前使用一个稍后才声明的变量，而不会引发异常</li>
<li>在执行所有代码前，JS有预解析阶段，会预读所有变量的定义</li>
<li>只提升定义，并不提升值</li>
<li>var 关键词可以变量提升， let 并不能</li>
<li>在实际开发中，一定要先定义变量赋值，再使用。</li>
</ol>
<h2 id="变量是什么"><a href="#变量是什么" class="headerlink" title="变量是什么"></a>变量是什么</h2><ol>
<li>要定义变量，第一步就是声明它，并给它赋值</li>
<li>变量是计算机语言中能存储计算结果或能表示值抽象概念</li>
<li>变量不是数值本身，它们仅仅是一个用于存储数值的容器</li>
<li>标识符的命名规则（函数、类名、对象的属性也要遵守这个规则）<ul>
<li><strong>变量名大小写敏感，a和A两个不同的变量</strong></li>
<li><strong>不能是关键词或保留词</strong></li>
<li><strong>只能由字母、数字、下划线、$组成，但不能以数字开头</strong></li>
</ul>
</li>
<li>优秀的变量命名法<ul>
<li>驼峰命名法 例如：mathTestScore</li>
<li>c风格 例如：math_test_score</li>
<li>匈牙利命名法 例如：iMathTestScore ，第一个字母 i，提示变量类型</li>
</ul>
</li>
<li>变量的默认值<ul>
<li>一个变量只定义，但没有赋值，默认是undefined</li>
</ul>
</li>
<li>等号表示赋值</li>
<li>同时声明多个变量<ul>
<li>var a&#x3D;0,b&#x3D;0;</li>
</ul>
</li>
<li>var 定义的变量会被挂载在 window 上，let 不会</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 包装类</title>
    <url>/2024/06/06/Java-%E5%8C%85%E8%A3%85%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="什么是包装类"><a href="#什么是包装类" class="headerlink" title="什么是包装类"></a>什么是包装类</h2><ol>
<li><em><strong>基本数据类型不具有对象特征，没有属性和方法，无法对象化交互，包装类的产生就是为了解决这样的问题，通过包装类，让基本数据类型拥有属性、方法，可以对象化交互</strong></em></li>
<li>包装类不允许被继承，没有子类</li>
</ol>
<h2 id="包装类与基本数据类型之间的对应关系"><a href="#包装类与基本数据类型之间的对应关系" class="headerlink" title="包装类与基本数据类型之间的对应关系"></a>包装类与基本数据类型之间的对应关系</h2><p>包装类与基本数据类型</p>
<ul>
<li>byte -&gt; Byte</li>
<li>short -&gt; Short</li>
<li><strong>int -&gt; Integer</strong></li>
<li>long -&gt; Long</li>
<li>float -&gt; Float</li>
<li>double -&gt; Double</li>
<li><strong>char -&gt; Character</strong></li>
<li>boolean -&gt; Boolean</li>
<li>除了 double、float 都可以应用对象常量池的概念</li>
</ul>
<h2 id="包装类的常用方法"><a href="#包装类的常用方法" class="headerlink" title="包装类的常用方法"></a>包装类的常用方法</h2><p> <a href="https://docs.oracle.com/javase/8/docs/api/">Java 文档手册</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3选择器</title>
    <url>/2024/06/04/CSS3%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="释义"><a href="#释义" class="headerlink" title="释义"></a>释义</h2><ul>
<li>（caseading style sheet、层叠式样式表）</li>
</ul>
<h2 id="前端三层"><a href="#前端三层" class="headerlink" title="前端三层"></a>前端三层</h2><ol>
<li>结构层 HTML<ul>
<li>搭建结构、放置部件、描述语义</li>
</ul>
</li>
<li>样式层 CSS<ul>
<li>美化页面、实现布局</li>
</ul>
</li>
<li>行为层 Javascript<ul>
<li>实现交互效果、数据收发、表单验证等</li>
</ul>
</li>
</ol>
<h2 id="选择器（CSS2-1）"><a href="#选择器（CSS2-1）" class="headerlink" title="选择器（CSS2.1）"></a>选择器（CSS2.1）</h2><ol>
<li>类选择器<ul>
<li>.类名称</li>
</ul>
</li>
<li>id选择器<ul>
<li>#id名称</li>
<li>命名：只能有字母、数字、下划线、短横构成、且不能以数字开字母区分大小写，但习惯小写字母开头</li>
</ul>
</li>
<li>元素选择器（标签选择器)<ul>
<li>元素名称</li>
<li>通常用于标签样式的初始化</li>
</ul>
</li>
<li>说明<ul>
<li><em><strong>选择器的优先级：内联样式&gt;id选择器&gt;类选择器&gt;元素选择器</strong></em></li>
</ul>
</li>
</ol>
<h2 id="复合选择器（CSS2-1）"><a href="#复合选择器（CSS2-1）" class="headerlink" title="复合选择器（CSS2.1）"></a>复合选择器（CSS2.1）</h2><ol>
<li>后代选择器<ul>
<li>.box .spec 选择.box 内部类名为.spec的标签</li>
</ul>
</li>
<li>交集选择器<ul>
<li>li.spec 选择既是li标签，名字也叫spec类的标签</li>
</ul>
</li>
<li>并集选择器<ul>
<li>ul,ol 选择所有ul和ol的标签</li>
</ul>
</li>
<li>题目：请根据样式属性，写出文档结构<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    div.box li p.spec em&#123;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;spec&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>哈哈哈哈<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="属性选择器（CSS3）-IE9"><a href="#属性选择器（CSS3）-IE9" class="headerlink" title="属性选择器（CSS3） &gt;&#x3D; IE9"></a>属性选择器（CSS3） &gt;&#x3D; IE9</h2><ol>
<li>img[alt]<ul>
<li>选择有alt属性的img标签</li>
</ul>
</li>
<li>img[alt&#x3D;”故宫”]<ul>
<li>选择alt 属性是故宫的img标签</li>
</ul>
</li>
<li>img[alt^&#x3D;”故宫”]<ul>
<li>选择alt属性以北京开头的img标签</li>
</ul>
</li>
<li>img[alt$&#x3D;”夜景”]<ul>
<li>选择alt属性以夜景结尾的img标签</li>
</ul>
</li>
<li>img[alt*&#x3D;”美”]<ul>
<li>选择alt属性包含美字的img标签</li>
</ul>
</li>
<li>img[alt~&#x3D;”手机拍摄”]<ul>
<li>选择有alt属性有空格隔开的手机拍摄字样的img标签</li>
</ul>
</li>
<li>img[alt|&#x3D;”参赛作品”]<ul>
<li>选择有alt属性以“参赛作品-”开头的img标签</li>
</ul>
</li>
</ol>
<h2 id="元素关系选择器（CSS3）"><a href="#元素关系选择器（CSS3）" class="headerlink" title="元素关系选择器（CSS3）"></a>元素关系选择器（CSS3）</h2><ol>
<li>子选择器&gt;&#x3D;IE7<ul>
<li>div&gt;p  div的子标签p</li>
</ul>
</li>
<li>相邻兄弟选择器<ul>
<li>img+p 图片后面紧跟着的段落将被选中</li>
</ul>
</li>
<li>通用兄弟选择器<ul>
<li>p~span  <em><strong>p元素之后的所有同层级span元素</strong></em></li>
</ul>
</li>
</ol>
<h2 id="序号选择器（CSS3）"><a href="#序号选择器（CSS3）" class="headerlink" title="序号选择器（CSS3）"></a>序号选择器（CSS3）</h2><ol>
<li>:first-child &gt;&#x3D;IE7<ul>
<li>第一个子元素</li>
</ul>
</li>
<li>:last-child<ul>
<li>最后一个子元素</li>
</ul>
</li>
<li>:nth-child(3)<ul>
<li>第三个子元素</li>
<li>:nth-child(3n+2)  从第二个开始，每三个选一个</li>
<li>2n+1 等价于 odd ，表示奇数</li>
<li>2n 等价于 even ，b表示偶数</li>
</ul>
</li>
<li>:nth-of-type(3)<ul>
<li>第三个某类型的子元素，将选择同种标签指定序号的子元素</li>
</ul>
</li>
<li>:nth-last-child(3)<ul>
<li>倒数第三个子元素</li>
</ul>
</li>
<li>:nth-last-of-type(3)<ul>
<li>倒数第三个某类型的子元素</li>
</ul>
</li>
</ol>
<h2 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h2><ol>
<li>在做网页项目前，可以将所有的常用字号、文字颜色、行高、外边距、内边距等设置为单独的类<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> 例如:</span><br><span class="line">.fs12&#123; font-size:12px &#125;</span><br><span class="line">.color-red &#123; color:red &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><ol>
<li>伪类是添加到选择器的描述性词语，指定要选择的元素的特殊状态，超级链接有4个特殊状态<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>  没有被访问过的超级链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> 已经被访问过的超级链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> 正被鼠标悬停的超级链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> 正被激活的超级链接（按下按键但是还没有松开按键）</span><br></pre></td></tr></table></figure></li>
<li>“爱恨准则” LOVE HATE<ul>
<li>:link -&gt; :visited -&gt; :hover -&gt; :active </li>
<li><em><strong>a 标签伪类必须按照这个写法，否则伪类不生效</strong></em></li>
</ul>
</li>
</ol>
<h2 id="伪元素（CSS3）"><a href="#伪元素（CSS3）" class="headerlink" title="伪元素（CSS3）"></a>伪元素（CSS3）</h2><ol>
<li>::before<ul>
<li>在元素之前创建</li>
</ul>
</li>
<li>::after<ul>
<li>在元素之后创建</li>
</ul>
</li>
<li>::selection<ul>
<li>用于文档中被用户高亮的部分（使用鼠标圈选的部分）</li>
</ul>
</li>
<li>::first-letter <ul>
<li>选中某元素中（必须是块级元素）第一行的第一个字母</li>
</ul>
</li>
<li>::first-line<ul>
<li>选中某元素中（必须是块级元素）第一行的全部文字</li>
</ul>
</li>
</ol>
<h2 id="层叠性和选择器权重计算"><a href="#层叠性和选择器权重计算" class="headerlink" title="*层叠性和选择器权重计算"></a>*<em><strong>层叠性和选择器权重计算</strong></em></h2><ol>
<li><em><strong>选择器的优先级：内联样式&gt;id选择器&gt;类选择器&gt;元素选择器</strong></em></li>
<li><em><strong>复杂选择器可以通过（id的个数，class的个数，标签的个数）的形式，计算权重</strong></em><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> #box1 #box2 p &#123;</span><br><span class="line">     color: red;</span><br><span class="line"> &#125;</span><br><span class="line"> #box1 div.box2 #box3 p &#123;</span><br><span class="line">     color: green;</span><br><span class="line"> &#125;</span><br><span class="line"> .box1 .box2 .box3 p &#123;</span><br><span class="line">     color: blue;</span><br><span class="line"> &#125;</span><br><span class="line"> 2,0,1</span><br><span class="line"> 2,1,2</span><br><span class="line"> 0,3,1</span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- id选择器个数，类选择器个数，元素选择器个数 --&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>!important 权重提升   <ul>
<li>很多公司不允许使用 important ，因为这会带来不经意的样式冲突</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 字符串</title>
    <url>/2024/06/06/Java-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="String-和-StringBuilder"><a href="#String-和-StringBuilder" class="headerlink" title="String 和 StringBuilder"></a>String 和 StringBuilder</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ol>
<li>如何创建 String 对象<ul>
<li>String s1  &#x3D; “test”</li>
<li>String s2 &#x3D; new String();</li>
<li>String s3 &#x3D; new String(“test”)</li>
</ul>
</li>
<li>String 对象的常用方法</li>
</ol>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>[<code>charAt(int index)</code>]</td>
<td>返回指定索引位置的字符</td>
</tr>
<tr>
<td>[<code>concat(String str)</code>]</td>
<td>将指定字符串连接到该字符串的结尾</td>
</tr>
<tr>
<td>[<code>contains(CharSequence s)</code>]</td>
<td>判断是否包含指定的字符序列</td>
</tr>
<tr>
<td>[<code>endsWith(String suffix)</code>]</td>
<td>判断字符串是否以指定的后缀结束</td>
</tr>
<tr>
<td>[<code>equals(Object obj)</code>]</td>
<td>比较字符串是否相等</td>
</tr>
<tr>
<td>[<code>equalsIgnoreCase(String str)</code>]</td>
<td>比较字符串是否相等,忽略大小写</td>
</tr>
<tr>
<td>[<code>indexOf(int ch)</code>]</td>
<td>返回指定字符在该字符串中首次出现处的索引</td>
</tr>
<tr>
<td>[<code>indexOf(String str)</code>]</td>
<td>返回指定子字符串在该字符串中首次出现处的索引</td>
</tr>
<tr>
<td>[<code>isEmpty()</code>]</td>
<td>判断字符串是否为空</td>
</tr>
<tr>
<td>[<code>length()</code>]</td>
<td>返回字符串的长度</td>
</tr>
<tr>
<td>[<code>replace(char oldChar, char newChar)</code>]</td>
<td>使用新值替换字符串中出现的所有旧值</td>
</tr>
<tr>
<td>[<code>split(String regex)</code>]</td>
<td>根据给定正则表达式的匹配拆分此字符串</td>
</tr>
<tr>
<td>[<code>startsWith(String prefix)</code>]</td>
<td>判断字符串是否以指定的前缀开始</td>
</tr>
<tr>
<td>[<code>substring(int beginIndex)</code>]</td>
<td>返回一个新的字符串,它是此字符串的一个子字符串</td>
</tr>
<tr>
<td>[<code>toCharArray()</code>]</td>
<td>将此字符串转换为一个新的字符数组</td>
</tr>
<tr>
<td>[<code>toLowerCase()</code>]</td>
<td>使用默认语言环境的规则将此 String 所有字符都转换为小写</td>
</tr>
<tr>
<td>[<code>toUpperCase()</code>]</td>
<td>使用默认语言环境的规则将此 String 所有字符都转换为大写</td>
</tr>
<tr>
<td>[<code>trim()</code>]</td>
<td>返回字符串的副本,删除前导空白和尾部空白</td>
</tr>
</tbody></table>
<ol>
<li>&#x3D;&#x3D; 和 equals 方法的区别</li>
</ol>
<table>
<thead>
<tr>
<th>比较项</th>
<th><code>==</code> 运算符</th>
<th><code>equals()</code> 方法</th>
</tr>
</thead>
<tbody><tr>
<td>比较对象</td>
<td>比较两个对象的引用是否指向同一个对象(内存地址是否相同)</td>
<td>比较两个对象的内容是否相同</td>
</tr>
<tr>
<td>适用类型</td>
<td>基本数据类型(如 int、double 等)和引用数据类型(如 String、Integer 等)</td>
<td>引用数据类型(如 String、Integer 等)</td>
</tr>
<tr>
<td>默认行为</td>
<td>基本数据类型比较值是否相同,引用数据类型比较引用是否相同</td>
<td>对于引用数据类型,默认比较对象的内容是否相同</td>
</tr>
<tr>
<td>重写</td>
<td>不能重写</td>
<td>可以被子类重写以实现自定义的比较逻辑</td>
</tr>
</tbody></table>
<p>总的来说:</p>
<ul>
<li><strong><code>==</code> 比较的是对象的内存地址，<code>equals()</code> 比较的是对象的内容。</strong></li>
<li>对于基本数据类型，<code>==</code> 比较的是值是否相同。</li>
<li>对于引用数据类型，如果没有重写 <code>equals()</code> 方法，那么 <code>equals()</code> 方法等价于 <code>==</code>。</li>
<li>通常比较引用数据类型的相等性时，应该使用 <code>equals()</code> 方法，因为这样可以比较对象的内容。</li>
</ul>
<ol start="2">
<li>String 的不可变性<ul>
<li>String 对象一旦被创建，则不能修改，是不可变的。</li>
<li>所谓的修改其实是创建了新的对象，所指向的内存空间不变，</li>
</ul>
</li>
</ol>
<h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><ol>
<li>与 String 区别<ul>
<li>String 具有不可变性，而 StringBuilder 不具备</li>
</ul>
</li>
<li>使用建议<ul>
<li>当频繁操作字符串时，使用 StringBuilder</li>
</ul>
</li>
<li>StringBuilder 和 StringBuffer<ul>
<li>二者基本相似</li>
<li>StringBuffer 是线程安全的，StringBuilder 则没有，所以性能略高。</li>
</ul>
</li>
<li>常用方法<ul>
<li>StringBuilder append(String str)</li>
<li>StringBuilder delete(int start,int end)</li>
<li>StringBuilder insert(int offset,String str)</li>
<li>StringBuilder replace(int start,int end,String str)</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 常量与变量</title>
    <url>/2024/05/31/Java-%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ol>
<li>如 类 的名字</li>
<li>标识符命名规则<ul>
<li>可以由 字母、数字、下划线 ( _ ) 和美元 ( $ ) 符组成，不能以数字开头</li>
<li>标识符严格区分大小写</li>
<li>不能是Java的关键字和保留字</li>
<li>标志符的命名最好能反映出作用</li>
</ul>
</li>
</ol>
<span id="more"></span>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><table>
<thead>
<tr>
<th>关键字</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>abstract</td>
<td>boolean</td>
<td>break</td>
<td>byte</td>
<td>case</td>
<td>catch</td>
</tr>
<tr>
<td>char</td>
<td>class</td>
<td>continue</td>
<td>default</td>
<td>do</td>
<td>double</td>
</tr>
<tr>
<td>else</td>
<td>extends</td>
<td>false</td>
<td>final</td>
<td>finally</td>
<td>float</td>
</tr>
<tr>
<td>for</td>
<td>if</td>
<td>implements</td>
<td>import</td>
<td>native</td>
<td>int</td>
</tr>
<tr>
<td>interface</td>
<td>long</td>
<td>instanceof</td>
<td>new</td>
<td>null</td>
<td>package</td>
</tr>
<tr>
<td>private</td>
<td>protected</td>
<td>public</td>
<td>return</td>
<td>short</td>
<td>static</td>
</tr>
<tr>
<td>super</td>
<td>switch</td>
<td>synchronized</td>
<td>this</td>
<td>throw</td>
<td>throws</td>
</tr>
<tr>
<td>transient</td>
<td>true</td>
<td>try</td>
<td>void</td>
<td>volatile</td>
<td>while</td>
</tr>
</tbody></table>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ol>
<li>什么是变量 <ul>
<li>程序中数据的临时存放场所，解决数据存储的问题，存储到内存中</li>
<li><strong>变量的三个元素：变量类型、变量名和变量值</strong></li>
<li>格式：数据类型 变量名;<ul>
<li>例子：int n; 声明整型 n</li>
<li>使用 “&#x3D; ” 运算符进行赋值</li>
</ul>
</li>
<li>可以在定义变量的同时给变量赋值，即变量的初始化。</li>
</ul>
</li>
<li>变量的命名规则<ul>
<li>满足标识符的命名规则</li>
<li>符合驼峰法命名规范</li>
<li>尽量简单、做到见名知意</li>
<li>变量名的长度没有限制</li>
</ul>
</li>
<li>类的命名规则<ul>
<li>满足 Pascal 命名法规范</li>
<li>组成类名的 首字母 总是大写</li>
</ul>
</li>
</ol>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>1个字节等于8位，类定义的变量又叫对象</p>
<ol>
<li><p>基本数据类型</p>
<ul>
<li>数值型<ol>
<li>整数类型（byte、short、int、long）<ul>
<li>字节型 1 <ul>
<li>表示范围：-128 - 127</li>
<li>占用内存 1 字节（8 bits）</li>
</ul>
</li>
<li>短整型 2<ul>
<li>表示范围：-32768 - 32767</li>
<li>占用内存 2 字节</li>
</ul>
</li>
<li>整型 4<ul>
<li>表示范围：-2,147,483,648 - 2,147,483,647</li>
<li>占用内存 4 字节</li>
</ul>
</li>
<li>长整型 8 <ul>
<li><strong>Java 中的整数类型默认为 int。如果需要使用 long 类型,需要在数值后加 L 或 l 来声明</strong> </li>
<li>最小值：-9,223,372,036,854,775,808  ~ 最大值：9,223,372,036,854,775,807）</li>
<li>占用内存: 8 字节 (64 bits)</li>
</ul>
</li>
<li>整型字面值<ul>
<li>Java 有三种表示整数的方法：十进制、八进制、十六进制</li>
<li>八进制：以 0 开头，包含 0 - 7 的数字，如：037</li>
<li>十进制：0-9，包含0 和 9</li>
<li>十六进制表示：以 0x 或 0X 开头，包括 0-9 的数字，及字母 a-f 、A-F , a表示数字10，以此类推。如：0x12，0xabcf</li>
<li>0x1abcL 长整型的表示方式，后缀 L，大小写均可</li>
</ul>
</li>
</ul>
</li>
<li>浮点类型（float、double）<ul>
<li>单精度浮点型 4</li>
<li>双精度浮点型 8 <ul>
<li>表示的范围是最大的</li>
</ul>
</li>
<li>浮点型字面值<ul>
<li>浮点型字面值默认情况下表示double类型，也可以在值后加上 d 或 D</li>
<li>如表示 float 类型，则需要在字面值后加 f 或 F</li>
</ul>
</li>
<li>用科学计数法表示浮点型数据  double d &#x3D; 1.23E5</li>
</ul>
</li>
</ol>
</li>
<li>字符型（char）2<ul>
<li>字符型字面值<ul>
<li>字符型字面值用单引号内的单个字符表示。</li>
<li>如何定义字符型变量？ char a &#x3D; ‘a’;</li>
<li>char 表示范围 0 -65535<ul>
<li>最小值: 0 (对应 Unicode 字符 ‘\u0000’)</li>
<li>最大值: 65,535 (对应 Unicode 字符 ‘\uFFFF’)</li>
</ul>
</li>
<li><strong>char 类型只能存储单个字符,如果尝试存储多个字符会报错！</strong></li>
</ul>
</li>
</ul>
</li>
<li>布尔型（boolean） 1<ul>
<li>布尔值字面值<ul>
<li>布尔值只能定义 true 或 false</li>
<li>例如：boolean b &#x3D; true;</li>
</ul>
</li>
</ul>
</li>
<li>字符串字面值<ul>
<li><strong>字符串不属于基本数据类型，它是类！</strong> </li>
<li>双引号引起来的0个或多个字符</li>
<li>例如 String s &#x3D; “”;</li>
</ul>
</li>
</ul>
</li>
<li><p>引用数据类型</p>
<ul>
<li>类（class）</li>
<li>接口（interface）</li>
<li>数组（Array）</li>
<li>枚举（Enum）</li>
<li>字符串（String）</li>
</ul>
</li>
<li><p>按照作用范围分为</p>
<ul>
<li>类级</li>
<li>对象实例级</li>
<li>方法级 局部变量</li>
<li>块级</li>
</ul>
</li>
</ol>
<h2 id="信息编码"><a href="#信息编码" class="headerlink" title="信息编码"></a>信息编码</h2><ol>
<li>ASCll 码<ul>
<li>美国标准信息交换代码</li>
<li>基于拉丁字母的一套电脑编码系统</li>
<li>主要用于显示现代英语和其他西欧语言（没有中文）</li>
<li>使用7位或8位二进制数组合来表示128位或256种可能的字符<ul>
<li>7位二进制组合——标准ASCll 码 （表示 大小写字母、标点符号、美式英语中的控制字符等）</li>
<li>8位 二进制数组合（后128位）—— 扩展ASCll 码（扩展ASCll 码表示特殊符号，外来语言的字母等）</li>
</ul>
</li>
</ul>
</li>
<li>Unicode 编码<ul>
<li>统一码、万国码</li>
<li>目标是支持世界上所有的字符集</li>
<li>char c &#x3D; ‘\u005d’</li>
<li>Unicode 表示法，在值的前面加前缀 \u</li>
</ul>
</li>
</ol>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ol>
<li>类型转换分为自动类型转换和强制类型转换</li>
<li>自动类型转换（隐式类型转换）<ul>
<li>转换顺序</li>
</ul>
</li>
<li>强制类型转换<ul>
<li>强制类型转换，可能引起数据丢失</li>
<li>如果 A 类型数据表示的范围比 B 类型大，则将 A 类型的值赋值给 B 类型，需要强制类型转换 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">d</span>  <span class="operator">=</span> <span class="number">123.4</span>;<span class="type">float</span> <span class="variable">f</span>  <span class="operator">=</span> (<span class="type">float</span>)d;</span><br></pre></td></tr></table></figure></li>
<li>强制类型转换的格式：（数据类型）数值</li>
</ul>
</li>
</ol>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul>
<li>final int n &#x3D; 5;</li>
<li><strong>用 final 关键字定义常量</strong> </li>
<li>不能变化的值</li>
<li><strong>常量名 一般用 大写字母表示，两个单词及以上，用下划线连接</strong></li>
</ul>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><table>
<thead>
<tr>
<th>转义字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\uxxxx</td>
<td>四位16进制所表示的字符</td>
</tr>
<tr>
<td>&#39;</td>
<td>单引号字符</td>
</tr>
<tr>
<td>&quot;</td>
<td>双引号字符</td>
</tr>
<tr>
<td>\</td>
<td>反斜杠字符</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\t</td>
<td>横向跳格</td>
</tr>
<tr>
<td>\b</td>
<td>退格</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JS函数与DOM</title>
    <url>/2024/06/14/JS%E5%87%BD%E6%95%B0%E4%B8%8EDOM/</url>
    <content><![CDATA[<h2 id="函数的基本使用"><a href="#函数的基本使用" class="headerlink" title="函数的基本使用"></a>函数的基本使用</h2><ol>
<li>函数的参数和返回值<ul>
<li>参数可多可少，用逗号分开</li>
<li>函数体内可以使用 return 关键词表示 “函数的返回值”</li>
<li>调用一个有返回值的函数，可以被当做一个普通纸，从而可以出现在哪任何可以书写值的地方</li>
<li>调用函数时，一旦遇见 return 语句则会立即退出函数，将执行权还给调用者</li>
</ul>
</li>
<li>函数的定义和调用<ul>
<li>和变量相似，函数必须先定义然后才能使用</li>
<li>使用 function 关键词定义函数，function 是“功能”的意思</li>
<li>函数名，必须符合JS标识符的命名规则</li>
</ul>
</li>
<li>什么是函数<ul>
<li>函数就是语句的封装，可以让这些代码方便的被复用</li>
<li>函数具有“一次定义，多次调用”的优点</li>
<li>使用函数，可以简化代码，让代码更具有可读性</li>
</ul>
</li>
<li><em><strong>函数声明的提升（面试题）</strong></em><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fun</span>()</span><br><span class="line">   <span class="comment">//  函数表达式</span></span><br><span class="line">   <span class="keyword">var</span> fun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">fun</span>()</span><br><span class="line"></span><br><span class="line">   <span class="comment">// B A</span></span><br></pre></td></tr></table></figure>
<ul>
<li>和变量声明提升类似，函数声明也可以被替身，函数表达式不能提升</li>
<li>变量的提升，只提升定义，不提升值。</li>
<li><em><strong>函数优先提升，然后再提升变量。</strong></em></li>
</ul>
</li>
</ol>
<h2 id="函数算法题"><a href="#函数算法题" class="headerlink" title="函数算法题"></a>函数算法题</h2><ol>
<li>函数算法题1<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【阿姆斯特朗数】 数字是 n 位数 , 该数字的每一位的 n 次方之和等于该数字本身 </span></span><br><span class="line"><span class="comment"> *  阿姆斯特朗数是指上述条件成立的任意位数的数字 水仙花数是指上述条件成立的 3 位数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            result *= i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> str = i.<span class="title function_">toString</span>();</span><br><span class="line">        <span class="keyword">var</span> a = <span class="title class_">Number</span>(str[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">var</span> b = <span class="title class_">Number</span>(str[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">var</span> c = <span class="title class_">Number</span>(str[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">factorial</span>(a) + <span class="title function_">factorial</span>(b) + <span class="title function_">factorial</span>(c) == i) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i&quot;</span>, i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>函数算法题2<ul>
<li>函数是JS的一等公民，它可以当做参数传入另一个函数</li>
<li>sort()函数 这个函数中的a，b分别表示数组中靠前和靠后的项，如果需要将它们交换位置，则返回任意整数，否则返回负数<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">33</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">11</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="comment">// if (a &gt; b) &#123;</span></span><br><span class="line">    <span class="comment">//     return 1</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//     return -1</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> b-a</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr&quot;</span>, arr)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ol>
<li>什么是递归<ul>
<li>函数的内部语句可以调用这个函数自身，从而发起对函数的一次迭代，在新的迭代中，又会执行调用函数自身的语句，从而又产生一次迭代，当函数执行到某一次时，不在进行新的迭代，函数被一层一层返回，函数被递归。</li>
<li>递归是一种较为高级的编程技巧，它把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解</li>
<li>递归的要素<ul>
<li><strong>边界条件：确定递归到何时终止，也称为递归出口</strong></li>
<li><strong>递归模式：大问题是如何分解为小问题的，也称为 递归体</strong></li>
</ul>
</li>
</ul>
</li>
<li>递归常见算法题<ul>
<li>斐波那契数列<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fib</span>(n - <span class="number">1</span>) + <span class="title function_">fib</span>(n - <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>阶乘<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">n</span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;n：&quot;</span>,n)</span><br><span class="line">         <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">         <span class="keyword">return</span> n * <span class="title function_">test</span>(n - <span class="number">1</span>)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">test</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>实现深克隆<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">12</span>, <span class="number">34</span>, <span class="number">12</span>, <span class="number">45</span>, [<span class="number">12</span>, <span class="number">44</span>]];</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> result = [];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr[i])) &#123;</span><br><span class="line">               result.<span class="title function_">push</span>(<span class="title function_">deepClone</span>(arr[i]))</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               result.<span class="title function_">push</span>(arr[i])</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> arr2 = <span class="title function_">deepClone</span>(arr1);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h2><ol>
<li>全局变量和局部变量<ul>
<li>JavaScript 是 函数作用域编程语言：变量只在其定义时所在的function内部有意义。</li>
<li>如果变量不定义在函数的内部，此时这个变量就是全局变量</li>
<li>遮蔽效应<ul>
<li>如果函数中也定义了和全局同名的变量，则函数内的变量会将全局的变量 “遮蔽”</li>
</ul>
</li>
<li>形参也是局部变量<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a</span>) &#123;</span><br><span class="line"> a++</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">7</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure></li>
<li>函数的嵌套<ul>
<li>一个函数内部也可以定义一个函数。和局部变量类似，定义在一个函数内部的函数时局部函数</li>
</ul>
</li>
<li>不加 var 将定义全局变量</li>
</ul>
</li>
<li>作用域链<ul>
<li>就是这个变量会被一层一层的（从内层到外层），去寻找它的作用域</li>
</ul>
</li>
<li>闭包<ul>
<li>什么是闭包<ul>
<li>Javascript 中函数会产生闭包（closure）。闭包是函数本身和该函数声明时所处的环境状态的组合。</li>
<li>函数能够“记忆住”其定义时所处的环境，即使函数不在其定义的环境中被调用，也能访问定义时所处环境的变量。</li>
</ul>
</li>
<li>观察闭包现象<ul>
<li>在JavaScript中，每次创建函数时都会创建闭包。但是，闭包特性往往需要将函数“换一个地方”执行，才能观察出来</li>
</ul>
</li>
<li>闭包非常实用<ul>
<li>因为它允许我们将数组与操作改数组的函数关联起来，这与“面向对象编程”有少许相似之处</li>
</ul>
</li>
<li>闭包的功能<ul>
<li>记忆性<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCheckTemp</span>(<span class="params">standardTemp</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">checkTemp</span>(<span class="params">n</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (n &lt;= standardTemp) &#123;</span><br><span class="line">               <span class="title function_">alert</span>(<span class="string">&#x27;你的体温正常&#x27;</span>)</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="title function_">alert</span>(<span class="string">&#x27;你的体温偏高&#x27;</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> area1 = <span class="title function_">createCheckTemp</span>(<span class="number">37.1</span>)</span><br><span class="line">   <span class="keyword">var</span> area2 = <span class="title function_">createCheckTemp</span>(<span class="number">38.1</span>)</span><br><span class="line">   <span class="title function_">area1</span>(<span class="number">38</span>)</span><br><span class="line">   <span class="title function_">area2</span>(<span class="number">38</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>当闭包产生时，函数所处环境的状态会始终保持在内存中，不会在外层函数调用后被自动清除。这就是闭包的记忆性</li>
</ul>
</li>
<li>模拟私有变量<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="attr">getA</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">             <span class="keyword">return</span> a</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">             <span class="keyword">return</span> a++</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">pow</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">             <span class="keyword">return</span> a *= <span class="number">2</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> obj = <span class="title function_">fun</span>()</span><br><span class="line"> obj.<span class="title function_">pow</span>()</span><br><span class="line"> obj.<span class="title function_">add</span>()</span><br><span class="line"> <span class="title function_">alert</span>(obj.<span class="title function_">getA</span>())</span><br></pre></td></tr></table></figure></li>
<li>使用闭包的注意点<ul>
<li>不能滥用闭包，否则会造成网页的性能问题，严重时可能导致内存泄漏。所谓内存泄漏是指程序中以动态分贝的内存由于某种原因未释放或无法释放</li>
</ul>
</li>
<li><strong>闭包面试题</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           count = count + <span class="number">1</span>;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> fun1 = <span class="title function_">addCount</span>()</span><br><span class="line">   <span class="keyword">var</span> fun2 = <span class="title function_">addCount</span>()</span><br><span class="line">   <span class="title function_">fun1</span>()</span><br><span class="line">   <span class="title function_">fun2</span>()</span><br><span class="line">   <span class="title function_">fun2</span>()</span><br><span class="line">   <span class="title function_">fun1</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><ol>
<li>立即执行函数 IIFE</li>
<li>立即调用函数，一旦被定义，就立即被调用</li>
<li>形成IIFE的方法<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运行函数 </span></span><br><span class="line">+<span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&#x27;立即调用1&#x27;</span>); &#125;() </span><br><span class="line">-<span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&#x27;立即调用2&#x27;</span>); &#125;()</span><br><span class="line">~<span class="keyword">function</span> <span class="title function_">fun3</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&#x27;立即调用3&#x27;</span>); &#125;() </span><br><span class="line">!<span class="keyword">function</span> <span class="title function_">fun4</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&#x27;立即调用4&#x27;</span>); &#125;()</span><br></pre></td></tr></table></figure>
<ul>
<li>函数必须转为“函数表达式”才能被调用</li>
</ul>
</li>
<li>IIFE的作用<ul>
<li>为变量赋值<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">28</span>;</span><br><span class="line">    <span class="keyword">var</span> sex = <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> title = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;小朋友&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (sex == <span class="string">&#x27;男&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;先生&#x27;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;女士&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line">    <span class="title function_">alert</span>(title)</span><br></pre></td></tr></table></figure></li>
<li>将全局变量变为局部变量<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">         (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">             arr.<span class="title function_">push</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                 <span class="title function_">alert</span>(i)</span><br><span class="line">             &#125;)</span><br><span class="line">         &#125;)(i)</span><br><span class="line">     &#125;</span><br><span class="line">     arr[<span class="number">1</span>]()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 开发环境搭建</title>
    <url>/2024/05/31/Java-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<ol>
<li>安装 JDK </li>
<li>安装 Navicat 数据库工具</li>
<li>安装 IntelliJ IDEA 编译器</li>
<li>安装 Redis <a href="https://blog.csdn.net/antma/article/details/79225084">Redis安装（Windows环境下Redis安装）</a> </li>
<li>maven3.6.3 安装 <a href="https://blog.csdn.net/kenkao/article/details/128842266">Windows系统Maven3.6.3下载与安装</a><ul>
<li>apache-maven-3.6.1&#x2F;conf  目录下配置  settingsapplication.xml 文件 <strong>主要用于配置 Maven 的行为和外部依赖</strong></li>
<li>apache-maven-3.6.1 目录下创建 repo 文件夹</li>
</ul>
</li>
<li>安装 IntelliJ IDEA  插件<br><img src="/images/874811934.png" alt="插件"><br><img src="/images/94823832832.png" alt="插件"></li>
<li>项目 .idea 目录下 misc.xml 文件配置 Yapi <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">&quot;yapi&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;projectToken&quot;</span>&gt;</span>your yapiToken<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;projectId&quot;</span>&gt;</span>789<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;yapiUrl&quot;</span>&gt;</span>your yapiUrl<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;projectType&quot;</span>&gt;</span>api<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>安装 Xshell </li>
<li>安装 XFTP</li>
</ol>
<p>友情链接：</p>
<ol>
<li><a href="https://plugins.jetbrains.com/plugin/index?xmlId=cn.wuzhizhan.plugin.mybatis">Free MyBatis plugin</a></li>
</ol>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 数组</title>
    <url>/2024/06/02/Java-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h2><ol>
<li><strong>数组是相同类型的数据按顺序组成的一种引用类型</strong></li>
<li>数据类型</li>
</ol>
<ul>
<li>基本数据类型</li>
<li>引用数据类型<ul>
<li>类</li>
<li>接口</li>
<li>数组</li>
<li>等等</li>
</ul>
</li>
</ul>
<ol start="3">
<li>注意的问题</li>
</ol>
<ul>
<li>数组是引用数据类型</li>
<li>创建数组时，会开辟连续的内存空间</li>
<li>数据长度使用 length 属性获取</li>
<li>数组元素的下标从0开始</li>
<li>数组下标越界问题</li>
</ul>
<h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><ol>
<li>声明</li>
</ol>
<ul>
<li>语法格式<ul>
<li><strong>数据类型[] 数组名;</strong></li>
<li><strong>数据类型 数组名[];</strong></li>
</ul>
</li>
<li>变量声明的语法格式<ul>
<li>数据类型 变量名;</li>
</ul>
</li>
</ul>
<ol start="2">
<li>创建<ul>
<li><strong>语法格式一：先声明后创建</strong><ul>
<li>数据类型[] 数组名;</li>
<li>数组名 &#x3D; new 数据类型[数组长度];</li>
<li>int [] arr;arr &#x3D; new int[10]; 创建一个长度为10的整型数组</li>
</ul>
</li>
<li><strong>语法格式二：声明的同时创建数组</strong><ul>
<li>数据类型[] 数组名 &#x3D; new 数据类型[数组长度];</li>
<li>int [] arr &#x3D; new int[10]; 创建长度为10的整型数组 arr</li>
<li>注意：数组长度必须指定</li>
</ul>
</li>
<li><strong>数组在内存中的存储</strong><ul>
<li><strong>数组会被分配连续的内存空间</strong></li>
<li>局部变量和数组的默认值问题<ul>
<li>局部变量没有默认值、数组有默认值（数组的本身是对象）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>初始化<ul>
<li>声明数组的同时给数组赋值，叫做数组的初始化</li>
<li><strong>int[] arr &#x3D; {1,2,3,4,5}; 数组的长度就是初始化时所给数组元素的个数</strong> (花括号)</li>
</ul>
</li>
<li>元素的引用<ul>
<li>语法格式：数组名[下标]</li>
<li>注意：下标从 0 开始</li>
</ul>
</li>
<li>长度<ul>
<li>arr.length 表示数组的长度</li>
</ul>
</li>
</ol>
<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><ul>
<li>二维数组的声明和创建<ul>
<li>声明<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] intArray;</span><br><span class="line"><span class="type">float</span> floatArray[][];</span><br><span class="line"><span class="type">double</span>[] doubleArray[];</span><br></pre></td></tr></table></figure></li>
<li>创建 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">intArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>列可以省略，行不能省略 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">floatArray = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">3</span>][]; floatArray[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>二维数组的初始化  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] num = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></li>
<li>二维数组的引用</li>
<li>多个一维数组组成的内容</li>
</ul>
<h2 id="增强型-for-循环"><a href="#增强型-for-循环" class="headerlink" title="增强型 for 循环"></a>增强型 for 循环</h2><ol>
<li>又叫 foreach 循环</li>
<li>foreach 循环引用<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> n;arr)</span><br><span class="line">System.out.println(n);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 方法</title>
    <url>/2024/06/02/Java-%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="什么是方法？"><a href="#什么是方法？" class="headerlink" title="什么是方法？"></a>什么是方法？</h2><p>所谓方法，就是用来解决一类问题的代码的有序组合，是一个功能模块。</p>
<h2 id="方法的声明和调用"><a href="#方法的声明和调用" class="headerlink" title="方法的声明和调用"></a>方法的声明和调用</h2><ol>
<li>方法声明<ul>
<li>语法格式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">访问修饰符 返回类型 方法名(参数列表)&#123;</span><br><span class="line">  方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>访问修饰符<ul>
<li>public</li>
<li>privete</li>
<li>protected</li>
<li>默认</li>
</ul>
</li>
<li><strong>方法是在类的内部中定义</strong></li>
</ul>
</li>
<li>方法调用<ul>
<li>语法格式 <ul>
<li>类名 实例名 &#x3D; new 类名(); 实例名.方法名();</li>
<li>对于静态方法 static , 直接调用 方法名();</li>
</ul>
</li>
</ul>
</li>
<li>方法分类<ul>
<li>根据方法是否带参数、是否返回值，可以分为四类：</li>
<li>无参无返回值方法</li>
<li>无参带返回值方法</li>
<li>带参带返回值方法</li>
<li>带参无返回值方法</li>
</ul>
</li>
</ol>
<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ol>
<li>同一个类中</li>
<li><strong>方法名相同，参数列表不同</strong></li>
<li>方法返回值、访问修饰符任意</li>
<li>与方法参数名无关</li>
</ol>
<h2 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h2><ol>
<li>public void sum(int… n) { &lt;语句块&gt; }<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... n)</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i:n) </span><br><span class="line">		sum+=i;</span><br><span class="line">	</span><br><span class="line">	System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><em><strong>参数列表中如果有两个以上的参数，可变参数一定是在最后的！</strong></em></li>
<li><em><strong>可以将数组传递给可变参数列表，反之不行</strong></em></li>
<li>数组作为参数时，是不能将多个值传递给数组的！</li>
<li><strong>一个方法中，只能有一个可变参数</strong></li>
<li>可变参数列表所在的方法是最后被访问的。</li>
</ol>
<h2 id="方法的传值问题"><a href="#方法的传值问题" class="headerlink" title="方法的传值问题"></a>方法的传值问题</h2><ol>
<li>基本数据类型传值<ul>
<li>方法中对参数的修改，不会对主方法传来的变量值产生影响</li>
</ul>
</li>
<li>引用数据类型传值<ul>
<li>方法中对数组的改变，会印象主方法中传来的数组</li>
</ul>
</li>
</ol>
<h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><table>
<thead>
<tr>
<th>访问修饰符</th>
<th>本类</th>
<th>同包</th>
<th>子类</th>
<th>其他</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>默认（不写）</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>private</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3浮动定位与背景样式</title>
    <url>/2024/06/04/CSS3%E6%B5%AE%E5%8A%A8%E5%AE%9A%E4%BD%8D%E4%B8%8E%E8%83%8C%E6%99%AF%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><ol>
<li>浮动的基本概念<ul>
<li><em><strong>垂直显示的浮动，不要设置浮动，只有并排显示的盒子才要设置浮动！</strong></em></li>
<li>“大盒子带着小盒子跑”，一个大盒子中，又是一个小天地，内部可以继续使用浮动</li>
<li>超市售卖的塑料袋0.3元一个，div是免费的！不要节约盒子</li>
<li><strong>本质</strong><ul>
<li>浮动的最本质的功能：实现并排</li>
<li>浮动的要点：要浮动，并排的盒子都要设置浮动</li>
<li>父盒子要有足够的宽度，否则子盒子会掉下去</li>
<li>浮动的顺序贴靠特性<ul>
<li><strong>子盒子会按顺序贴靠，如果没有足够的空间，则会寻找再前一个兄弟元素</strong></li>
</ul>
</li>
<li>浮动的元素一定能设置宽高<ul>
<li>浮动元素不在区分块级元素、行内元素，已经脱离了标准的文档流，一律能够设置宽度和高度，即使它是span标签或者标签等</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>使用浮动实现网页布局</li>
<li>BFC规范和浏览器差异<ul>
<li>BFC（ Box formatting Context）块级格式化上下文 是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然</li>
<li>从一个现象开始说起<ul>
<li><strong>一个盒子不设置height，当内容的子元素都浮动时，无法撑起自身</strong></li>
<li>这个盒子没有形成BFC</li>
<li><em><strong>如何形成BFC</strong></em><ul>
<li>1、float的值不是none</li>
<li>2、position的值不是static或者relative</li>
<li>3、display的值是inline-block、flex或者inline-flex</li>
<li>4、overflow:hidden<ul>
<li>溢出隐藏，溢出盒子边框会隐藏</li>
</ul>
</li>
</ul>
</li>
<li>BFC的其他作用<ul>
<li>BFC可以取消盒子的margin塌陷</li>
<li>BFC可以阻止元素被浮动的元素覆盖</li>
</ul>
</li>
<li>浏览器差异<ul>
<li>IE6、IE7浏览器使用haslayout机制，和BFC规范略有差异，比如IE浏览器可以使用zoom:1属性，“让壳子拥有layout”</li>
<li>如果要兼容IE6、IE7网页时，尽量让网页设计的简单。内部有浮动的盒子要设置height属性，规范编程，不要“玩杂技”</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>清除浮动<ul>
<li>clear: both;</li>
<li>overflow:hidden</li>
</ul>
</li>
</ol>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><ol>
<li>相对定位<ul>
<li>相对定位：盒子可以相对自己原来的位置进行调整，称为”相对定位“</li>
<li><strong>position: relative;</strong></li>
<li>值可以是负数，即往相反的位置移动</li>
<li>相对定位的元素，会在“老家留坑”，本质上任然是在原来的位置，只不过渲染在新的地方而已，渲染的图形可以比如成“影子”，不会对其他元素产生任何影响</li>
<li>相对定位的用途：用来微调元素位置。可以当做绝对定位的参考盒子。</li>
</ul>
</li>
<li>绝对定位<ul>
<li>盒子可以在浏览器中，以坐标进行位置精准描述，拥有自己的绝对位置</li>
<li><strong>position: absolute;</strong></li>
<li>left 到左边的距离，right 到右边的距离，top 到上边的距离，bottom到下边的距离</li>
<li>绝对定位元素脱离标准文档流，将释放自己的位置，对其他元素不会产生任何干扰，而是对它进行压盖</li>
<li><em><strong>脱离标准文档流的方法：浮动、绝对定位、固定定位</strong></em></li>
<li>绝对定位的参考盒子：绝对定位的盒子会以自己祖先元素中，离自己最近的拥有定位属性的盒子，当做基准点，这个盒子通常是相对定位的，所以这个性质也叫作 <strong>“子绝父相”</strong></li>
<li>绝对定位的盒子并不是永远以浏览器作为基点</li>
<li><strong>绝对定位的盒子垂直居中</strong><ul>
<li>position:absolute; top:50%; margin-top:-自己高度的一半</li>
</ul>
</li>
<li>堆叠顺序 z-index<ul>
<li>没有单位，数值大的就能压盖住小的</li>
</ul>
</li>
<li>绝对定位用途：“压盖”、“遮罩”效果，结合JS实现动画效果，“雪碧图”</li>
</ul>
</li>
<li>固定定位<ul>
<li>position: fixed;</li>
<li>固定定位只能以页面为参考点，没有“子固父相”这个性质</li>
<li>固定定位脱离标准文档流</li>
<li>用途：返回顶部，楼层导航等</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 运算符</title>
    <url>/2024/05/31/Java-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><ol>
<li>表达式由运算符和操作数组成</li>
<li>如：5、num1、num1 + num2</li>
</ol>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ol>
<li>算数运算符<ul>
<li>算数运算符主要用于进行基本的算数运算，如加法、减法、乘法和除法等。</li>
<li>加法 +</li>
<li>减法 - </li>
<li>乘法 * </li>
<li>除法 &#x2F;  <strong>在除法运算中，如果除数和被除数都是整数，则做整除运算</strong></li>
<li>求余数 %</li>
<li>自增1 ++</li>
<li>自减1 –</li>
</ul>
</li>
<li>赋值运算符<ul>
<li>格式：变量 &#x3D; 表达式;</li>
<li><strong>注意：赋值运算符是从右往左运算！</strong> </li>
<li><strong>赋值运算符的左边不能是常量，必须是常量</strong></li>
<li>复合赋值运算符<ul>
<li>+&#x3D; 代码示例：x+&#x3D;5 , x &#x3D; x + 5</li>
<li>-&#x3D;</li>
<li>*&#x3D;</li>
<li>&#x2F;&#x3D;</li>
<li>%&#x3D;</li>
</ul>
</li>
</ul>
</li>
<li>关系运算符<ul>
<li>比较运算符用于判断两个数据的大小，如大于</li>
<li>比较的结果是一个 布尔值</li>
<li>大于 &gt;<ul>
<li>‘A’ &gt; ‘’B  结果为 false , 比较的是两个字符的 ASCll 值</li>
</ul>
</li>
<li>小于 &lt;</li>
<li>大于等于 &gt;&#x3D;</li>
<li>小于等于 &lt;&#x3D;</li>
<li>等于 &#x3D;&#x3D;<ul>
<li>float  f &#x3D; 5.0f; long l &#x3D;5; f&#x3D;&#x3D;l;  结果为true，浮点数与整数进行比较，只要值相等就返回true</li>
</ul>
</li>
<li>不等于 !&#x3D;</li>
<li>作用与功能<ul>
<li>数据比较<ul>
<li>关系运算符主要用于条件和循环语句中的判断条件</li>
<li>条件结构就是根据不同的条件去执行不同的操作</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>逻辑运算符<ul>
<li>逻辑运算符是用来连接一个或多个条件，判断这些条件是否成立 </li>
<li>逻辑运算符的结果是布尔类型</li>
<li>与<ul>
<li>&amp;&amp; 或 &amp;<ul>
<li>&amp;&amp; 运算符又叫短路运算符，如果第一个表达式的值就能决定表达式最后的结果，运算符右边的表达式就不再运算了</li>
<li>&amp; 不论第一个表达式 true 还是 false，都要执行右边的表达式</li>
</ul>
</li>
<li>operator1 &amp;&amp; operator2</li>
</ul>
</li>
<li>或<ul>
<li>|| 或 |<ul>
<li>|| 和  &amp;&amp; 运算符一样</li>
<li>| 和 &amp; 一样</li>
</ul>
</li>
<li>operator1 || operator2</li>
</ul>
</li>
<li>非<ul>
<li>!<ul>
<li>对原条件进行取反</li>
</ul>
</li>
<li>!operator1</li>
</ul>
</li>
<li>注意：<strong>逻辑运算符的操作数都是布尔类型的</strong></li>
</ul>
</li>
<li>条件运算符<ul>
<li>三元运算符 ? :</li>
</ul>
</li>
<li>Java 中的条件运算符是三目运算符<ul>
<li>++ 单目运算符</li>
<li>双目运算符，需要对两个数进行操作 + - * &#x2F; </li>
<li><strong>语法：布尔表达式 ? 表达式1 : 表达式2</strong></li>
<li>当布尔表达式的值为 true , 则返回表达式 1 的值，否则 返回表达式 2 的值</li>
</ul>
</li>
<li>位运算符<ul>
<li>按位与（&amp;）：逐位进行与操作，只有当对应位都为 1 时，结果位才为 1。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 二进制为 0101</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">// 二进制为 0011</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a &amp; b; <span class="comment">// 结果为 1 (二进制为 0001)</span></span><br></pre></td></tr></table></figure></li>
<li>按位或（|）：逐位进行或操作，只要有一个对应位为 1，结果位就为 1。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 二进制为 0101</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">// 二进制为 0011</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a | b; <span class="comment">// 结果为 7 (二进制为 0111)</span></span><br></pre></td></tr></table></figure></li>
<li>按位异或（^）：逐位进行异或操作，当对应位不同时，结果位为 1。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 二进制为 0101</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">// 二进制为 0011</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a ^ b; <span class="comment">// 结果为 6 (二进制为 0110)</span></span><br></pre></td></tr></table></figure></li>
<li>按位取反（~）：逐位进行取反操作，0 变 1，1 变 0。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 二进制为 0101</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> ~a; <span class="comment">// 结果为 -6 (二进制为 1010)</span></span><br></pre></td></tr></table></figure></li>
<li>左移（&lt;&lt;）：将二进制位向左移动指定的位数，相当于乘以 2 的指定次方。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 二进制为 0101</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a &lt;&lt; <span class="number">1</span>; <span class="comment">// 结果为 10 (二进制为 1010)</span></span><br></pre></td></tr></table></figure></li>
<li>右移（&gt;&gt;）：将二进制位向右移动指定的位数，相当于除以 2 的指定次方。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 二进制为 0101</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a &gt;&gt; <span class="number">1</span>; <span class="comment">// 结果为 2 (二进制为 0010)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>运算符优先级<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>权重</th>
</tr>
</thead>
<tbody><tr>
<td>()</td>
<td>圆括号</td>
<td>0</td>
</tr>
<tr>
<td>!，++，–</td>
<td>逻辑非，自增，自减</td>
<td>1</td>
</tr>
<tr>
<td>*，&#x2F;，%</td>
<td>乘法，除法，取余</td>
<td>2</td>
</tr>
<tr>
<td>+，-</td>
<td>加法，减法</td>
<td>3</td>
</tr>
<tr>
<td>&lt;，&lt;&#x3D;，&gt;，&gt;&#x3D;</td>
<td>小于，小于等于，大于，大于等于</td>
<td>4</td>
</tr>
<tr>
<td>&#x3D;&#x3D;，!&#x3D;</td>
<td>等于，不等于</td>
<td>5</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>逻辑与</td>
<td>6</td>
</tr>
<tr>
<td>||</td>
<td>逻辑或</td>
<td>7</td>
</tr>
<tr>
<td>&#x3D;，+&#x3D;，*&#x3D;，&#x2F;&#x3D;，%&#x3D;，-&#x3D;</td>
<td>赋值运算符，复合赋值运算符</td>
<td>8</td>
</tr>
</tbody></table>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 选择结构</title>
    <url>/2024/06/02/Java-%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><ol>
<li>三大流程控制语句：顺序、选择、循环<ul>
<li>顺序结构，从上往下依次执行</li>
<li>选择结构，根据条件执行对应的内容</li>
<li>循环结构，循环执行，反复执行</li>
</ul>
</li>
</ol>
<h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><ol>
<li>if 结构 ，if - else 结构</li>
<li>多重 if </li>
<li>嵌套 if </li>
<li>switch 结构</li>
<li>if 和 switch 的区别<ul>
<li>if 结构<ul>
<li>判断条件是布尔类型</li>
<li>判断条件是一个范围</li>
</ul>
</li>
<li>switch 结构<ul>
<li>判断条件是常量值<br>JDK 7.0 以后表达式的值可以是基本数据类型的，byte，short，int，char，以及 String 类型。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><ol>
<li>while<ul>
<li>如果循环体只有一条语句，大括号可以省略</li>
<li>为避免死循环，小括号后面不要加分号</li>
<li>语法格式  while(条件){ &lt;语句&gt; }</li>
</ul>
</li>
<li>do-while<ul>
<li>注意事项<ul>
<li>do-while 循环至少执行一次</li>
<li>循环条件后的分号不能丢</li>
<li>局部变量使用前必须初始化</li>
</ul>
</li>
<li>语法格式  do{ &lt;语句&gt;} while(循环条件);</li>
<li>Math.random() 得到 [0,1) 之间的随机数</li>
</ul>
</li>
<li>for<ul>
<li>语法格式：for(表达式1;表达式2;表达式3){ &lt;语句&gt;}</li>
<li>注意事项：break 语句表示跳出当前循环</li>
</ul>
</li>
<li>循环嵌套</li>
<li>break 语句<ul>
<li>break 语句可以结束当前循环的执行</li>
<li>执行完 break 语句后，循环体中位于 break 语句后面的语句就不会被执行</li>
<li>在多重循环中，break 语句只向外跳一层</li>
<li>注意：<strong>break 跳出当前循环</strong></li>
</ul>
</li>
<li>continue 语句<ul>
<li>continue 语句只能用在循环里</li>
<li>continue 语句可以结束当前循环的执行，但是要继续执行下一次循环的执行</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 异常</title>
    <url>/2024/06/03/Java-%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h2 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h2><ol>
<li>异常本质上是程序上的错误。</li>
<li>错误在我们编写程序的过程中会经常发生，包括编译期间和运行期间的错误。</li>
<li>在程序运行过程中，意外发生的情况，背离我们程序本身的意图的表现，都可以理解为异常。</li>
</ol>
<h2 id="Throwable（异常的根类）"><a href="#Throwable（异常的根类）" class="headerlink" title="Throwable（异常的根类）"></a>Throwable（异常的根类）</h2><ol>
<li>Error（Java 虚拟机出现问题）<ul>
<li>Error 是程序无法处理的错误，表示运行应用程序中比较严重的问题。</li>
<li>它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</li>
<li>对于设计的合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。</li>
<li>常见错误<ul>
<li>虚拟机错误 VirtualMachineError</li>
<li>内存溢出 OutOfMemoryError</li>
<li>线程死锁 ThreadDeath</li>
</ul>
</li>
</ul>
</li>
<li>Exception<ul>
<li>Exception 是程序本身可以处理的异常。异常处理通常指针对这种类型异常的处理。</li>
<li>检查异常 Checked Exception<ul>
<li>编译器要求必须处置的异常。（编码阶段）</li>
<li>除了 RuntimeException 及相关子类，其它异常都属于 Checked Exception<ul>
<li>IO 异常 IOException</li>
<li>SQL 异常 SQLException</li>
<li>等等</li>
</ul>
</li>
</ul>
</li>
<li>非检查异常 Unchecked Exception<ul>
<li>编译器不要求强制处置的异常（运行阶段）</li>
<li>包含 RuntimeException 及相关子类<ul>
<li>空指针异常 NullPointerException</li>
<li>数组下标越界异常 ArrayIndexOutOfBoundsException</li>
<li>算数异常 ArithmeticException</li>
<li>类型转换异常 ClassCastException</li>
<li>等等…</li>
</ul>
</li>
</ul>
</li>
<li>System.exit(1); 终止程序运行</li>
</ul>
</li>
</ol>
<h2 id="throw-throws"><a href="#throw-throws" class="headerlink" title="throw &amp; throws"></a>throw &amp; throws</h2><ol>
<li>throws<ul>
<li>可以通过 throws 声明将要抛出何种类型的异常，通过 throw 将产生的异常抛出。</li>
<li>如果一个方法可能出现异常，但没有能力处理这种异常，可以在方法声明处用 throws 子句来声明抛出异常。</li>
<li>throws 语句用在方法定义时声明该方法要抛出的异常类型。</li>
<li>当方法抛出异常列表中的异常时，方法将不对这些类型及其子类类型的异常做处理，而抛向调用该方法的方法，由他去处理。</li>
</ul>
</li>
<li>throw<ul>
<li>throw 用来抛出一个异常。<ul>
<li>例如：throw new IOException():</li>
</ul>
</li>
<li>thorw 抛出的只能够是可抛出类 Throwable 或者其子类的实例对象。<ul>
<li>例如：throw new String(“出错了”); 是错误的<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">     <span class="comment">// 代码段1</span></span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> 异常类型();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(异常类型 ex)&#123;</span><br><span class="line">      <span class="comment">// 对异常处理的代码段2</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>  <span class="keyword">throws</span> 异常类型&#123;</span><br><span class="line">   <span class="comment">// 代码段1</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> 异常类型();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>作用<ul>
<li><em><strong>规避可能出现的风险</strong></em></li>
<li><em><strong>完成一些程序的逻辑</strong></em></li>
</ul>
</li>
<li>throw 抛出异常对象的处理方案<ul>
<li>通过 try…catch 包含 throw 语句 —— 自己抛出自己处理</li>
<li>通过 throws 在方法声明抛出异常类型 —— 谁调用谁处理 —— 调用者可以自己处理，也可以继续上抛。此时可以抛出与 throw 对象相同类型或者其父类</li>
<li><strong>当子类重写父类抛出异常方法时，声明的异常必须是父类方法所声明异常的同类或子类。</strong></li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ol>
<li>基本概念<ul>
<li>使用 Java 内置的异常类可以描述在编程时出现的大部分异常情况。</li>
<li>也可以通过自定义异常描述特定业务产生的异常类型。</li>
<li>所谓自定义异常，就是定义一个类，去继承 Throwable 类或者它的子类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">TestException</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="built_in">super</span>(<span class="string">&quot;向父类抛的异常消息&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throw</span> TestException&#123;</span><br><span class="line">       &lt;代码块&gt;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TestException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h2><ol>
<li>基本概念<ul>
<li>有时候我们会捕获一个异常后在抛出另一个异常</li>
<li>顾名思义就是：将异常发生的原因一个传一个串起来，即把底层的异常信息传个上层，这样逐层抛出。</li>
</ul>
</li>
<li>Exception e1 &#x3D; new Exception(“异常消息”); e1.initCause(e);</li>
</ol>
<h2 id="如何处理异常"><a href="#如何处理异常" class="headerlink" title="如何处理异常"></a>如何处理异常</h2><ol>
<li>在 Java 应用程序中，异常处理机制为<ul>
<li>抛出异常（先抛出，才能被捕获）</li>
<li>捕获异常</li>
</ul>
</li>
<li>对于运行时异常，错误或可检查异常，Java 技术所要求的异常处理方式有所不同。<ul>
<li>1、对于可查异常必须捕捉、或者声明抛出</li>
<li>2、允许忽略不可查的 RuntimeException（含子类）和 Error（含子类）</li>
</ul>
</li>
<li>通过 5 个关键字来实现<ul>
<li>捕获异常<ul>
<li>try（执行可能产生异常的代码）</li>
<li>catch（捕获异常）</li>
<li>finally（无论是否发生异常 代码总能执行）</li>
</ul>
</li>
<li>声明异常<ul>
<li>throws（声明可能要抛出的异常）</li>
</ul>
</li>
<li>抛出异常<ul>
<li>throw （手动抛出异常）</li>
</ul>
</li>
</ul>
</li>
<li>规则说明<ul>
<li>try-catch-finally <ul>
<li>try 块后可接零个或多个catch块，如果没有 catch 块，则必须跟一个finally块。</li>
</ul>
</li>
</ul>
</li>
<li>自定义异常</li>
<li>异常链</li>
</ol>
<h2 id="实际应用总结"><a href="#实际应用总结" class="headerlink" title="实际应用总结"></a>实际应用总结</h2><ol>
<li>处理运行异常时，采用逻辑去合理规避同时辅助 try-catch 处理</li>
<li>在多重 catch 块后面，可以加一个 catch（Exception） 来处理可能被遗漏的异常</li>
<li>对于不确定的代码，也可以加上 try-catch，处理潜在的异常</li>
<li>尽量去处理异常，切忌知识简单的调用 printStackTrace() 去打印输出</li>
<li>具体如何处理异常，要根据不同的业务需求和异常类型去决定</li>
<li>尽量添加 finally 语句块去释放占用的资源（关闭文件、关闭 sql 链接）等</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 面向对象1</title>
    <url>/2024/06/02/Java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A11/</url>
    <content><![CDATA[<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><ol>
<li>面向对象<ul>
<li><strong>关注现实存在的事物的各方面信息，从对象的角度出发，根据事物的特征进行程序设计</strong></li>
<li>对象：用来描述客观事物的一个实体</li>
<li>类：具有相同属性和方法的一组对象的集合</li>
</ul>
</li>
<li>属性<ul>
<li>对象具有的各种静态特征</li>
<li>“对象有什么”</li>
</ul>
</li>
<li>方法<ul>
<li>对象具有的各种</li>
<li>“对象能做什么”</li>
<li>在方法中通过对象作为参数，传递的是它的引用，可以通过引用获取该对象的所有信息。</li>
</ul>
</li>
<li>类<ul>
<li>抽象的概念</li>
<li>模板</li>
<li>类是模子，确定对象将会拥有的特征（属性）和行为（方法）</li>
<li>类是对象的类型</li>
<li>构造方法<ul>
<li>注意事项<ul>
<li><em><strong>构造方法与类同名且没有返回值（必须与类名相同）</strong></em><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造方法的语法格式：</span></span><br><span class="line"><span class="comment">// 没有返回值类型 , 构造方法名 与类名相同 </span></span><br><span class="line"><span class="keyword">public</span> 构造方法名()&#123;</span><br><span class="line">  <span class="comment">// 初始化代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>只能在对象实例化的时候调用</li>
</ul>
</li>
<li>特点<ul>
<li><em><strong>当没有指定构造方法时，系统会自动添加无参的构造方法</strong></em></li>
<li><em><strong>当有指定构造方法，无论是有参、无参的构造方法，都不会自动添加无参的构造方法</strong></em></li>
<li>一个类中可以有多个构造方法</li>
<li>this();  访问其它无参或带参 构造方法</li>
</ul>
</li>
</ul>
</li>
<li>this 关键字<ul>
<li>this：当前对象的默认引用</li>
<li>this 的使用<ul>
<li>调用成员属性，解决成员属性的局部变量同名冲突</li>
<li>调用成员方法</li>
<li>调用重载的构造方法 this();<ul>
<li><em><strong>通过 this() 调用构造方法，必须放在方法体内的第一行！！！</strong></em></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>对象<ul>
<li>基本概念<ul>
<li>一个看得到、摸着着的具体实体</li>
<li>对象是类的实例表现</li>
<li>万物皆对象</li>
<li>对象是特定的类型数据</li>
</ul>
</li>
<li>对象实例化<ul>
<li>实例化对象过程可以分为两部分<ul>
<li>声明对象 Class 对象名称<ul>
<li><strong>在内存的栈中开辟一个空间，此时栈空间的数据是空的</strong></li>
</ul>
</li>
<li>实例化对象 new Class<ul>
<li><strong>经过实例化的环节，会在内存的堆中开辟一块空间，在此完成具体属性赋值等相关操作</strong><br><em><strong>声明对象和实例化对象通过 &#x3D; 赋值符号完成。经过赋值操作，将内存的堆地址，传递到栈当中的内存空间里。</strong></em></li>
</ul>
</li>
</ul>
</li>
<li>内存分配 栈[局部变量] ，堆[动态数据]</li>
</ul>
</li>
<li>注意事项<ul>
<li>需要多次访问同一对象时，必须进行声明</li>
<li>同一作用范围内，不能定义同名对象</li>
<li>可以同时声明多个引用，用逗号分割<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cat one,two;</span><br><span class="line">one = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">two = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="type">Cat</span> <span class="variable">three</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();four = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ol>
<li>将类的某些信息隐藏在类的内部，不允许外部程序直接访问，通过该类提供的方法来实现对隐藏信息的操作和访问<ul>
<li>隐藏对象的信息</li>
<li>留出访问的接口</li>
</ul>
</li>
<li>特点<ul>
<li>只能通过规定的方法访问数据</li>
<li>隐藏类的实例细节，方便修改和实现</li>
</ul>
</li>
<li>实现步骤<ul>
<li>1、修改属性的可见性 ，设为 private</li>
<li>2、创建 getter&#x2F;setter 方法 ，设为 public 用户属性的读写</li>
<li>3、在 getter&#x2F;setter 方法中加入属性控制语句，对属性的合法性进行判断</li>
</ul>
</li>
<li>包（类似文件夹）<ul>
<li>作用<ul>
<li><strong>管理 Java 文件</strong></li>
<li><strong>解决同名文件冲突</strong></li>
</ul>
</li>
<li>定义包<ul>
<li>语法 package 包名;例：package com.zje.animal;</li>
<li>注意<ul>
<li><em><strong>一个 Java 源文件只能有一个 package 语句，必须放在 Java 源文件中的第一行</strong></em></li>
<li>包名全部英文小写</li>
<li>建议每个包内存储信息功能单一</li>
<li>包命名规则：域名倒序+模块+功能</li>
<li>Java 中一个包不能存在同名类</li>
</ul>
</li>
</ul>
</li>
<li>导入包<ul>
<li>语法 import 包名.类名;</li>
<li>导入包中全部类 import com.xxx.*; 导入包中指定类 import com.xxx.animal.Cat;</li>
</ul>
</li>
<li>常用系统包<ul>
<li>java.lang<ul>
<li>包含 Java 语言基础的类，该包系统加载时 默认导入。如 System、String、Math</li>
</ul>
</li>
<li>java.util<ul>
<li>包含 Java 语言中常用工具。如 Scanner、Random</li>
</ul>
</li>
<li>java.io<ul>
<li>包含输入、输出相关功能的类。如File、InputStream</li>
</ul>
</li>
</ul>
</li>
<li>问题<ul>
<li>如何实现跨包的类调用？<ul>
<li>建议采用“import 包名.类名;” 的方式加载，提高效率</li>
<li>加载类的顺序跟 import 导入语句的位置无关</li>
<li>“import 包名.*”; 无法访问指定包名下的类，无法访问子包下的类</li>
</ul>
</li>
<li>有几种调用形式？<ol>
<li>使用 import 语句导入目标类:这种方式可以直接在代码中使用 TargetClass 而无需指定完整的包路径。</li>
</ol>
<pre><code class="Java">import com.example.targetpackage.TargetClass;
</code></pre>
<ol start="2">
<li>使用完整的包路径访问目标类:这种方式需要在代码中完整地指定目标类的包路径。</li>
</ol>
<pre><code class="Java">com.example.targetpackage.TargetClass targetObject = new com.example.targetpackage.TargetClass();
</code></pre>
<ol start="3">
<li>使用 static import 导入目标类的静态成员:这种方式可以直接访问目标类的静态成员,无需指定类名。</li>
</ol>
<pre><code class="Java">import static com.example.targetpackage.TargetClass.staticMethod;
staticMethod(); // 直接调用静态方法
</code></pre>
<ol start="4">
<li>使用 default 访问修饰符允许同一个包下的类进行访问:这种方式需要将目标类的方法声明为 default 访问修饰符,这样同包下的其他类就可以访问该方法。</li>
</ol>
<pre><code class="Java">// com.example.targetpackage.TargetClass
default void defaultMethod() &#123;
  // 此方法可被同包下的其他类访问
&#125;
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><strong>static 关键字</strong><ul>
<li><strong>1、类对象共享</strong></li>
<li><strong>2、类加载时产生，销毁时释放，生命周期长</strong></li>
<li>注意事项<ul>
<li>在成员方法中，可以直接访问类中的静态成员</li>
<li>静态方法中不能直接访问非静态成员，只能直接调用静态成员</li>
<li>只能通过对象实例化后，对象.成员方法的方式访问非静态成员</li>
<li>静态方法中不能使用 this</li>
</ul>
</li>
<li>静态成员访问方式<ul>
<li>1、对象.成员</li>
<li>2、类.成员</li>
</ul>
</li>
</ul>
</li>
<li>代码块<ul>
<li>普通代码块：每此调用方法 顺序执行，先出现，先执行。</li>
<li>构造代码块：在类中定义，创建对象时调用，优先于构造方法执行。可以有多个</li>
<li>静态代码块<ul>
<li>static { &lt;语句&gt; }</li>
<li>类加载时调用，优先于构造代码块执行</li>
<li>无论产生多少类实例，静态代码块只执行一次，构造代码块在每次对象构造的时候调用</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="成员属性的初始值"><a href="#成员属性的初始值" class="headerlink" title="成员属性的初始值"></a>成员属性的初始值</h2><table>
<thead>
<tr>
<th>数据类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>0</td>
</tr>
<tr>
<td>short</td>
<td>0</td>
</tr>
<tr>
<td>int</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>0L</td>
</tr>
<tr>
<td>float</td>
<td>0.0f</td>
</tr>
<tr>
<td>double</td>
<td>0.0d</td>
</tr>
<tr>
<td>char</td>
<td>‘\u0000’</td>
</tr>
<tr>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>引用类型对象的初始值</td>
<td>null</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>BOM基础</title>
    <url>/2024/06/12/BOM%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="BOM是什么"><a href="#BOM是什么" class="headerlink" title="BOM是什么"></a>BOM是什么</h2><ol>
<li>一些与浏览器改变尺寸，滚动条滚动的特效，都要借助BOM技术</li>
<li>BOM(Browser Object Model, 浏览器对象模型) 是JS与浏览器窗口交互的接口</li>
</ol>
<h2 id="BOM常用对象"><a href="#BOM常用对象" class="headerlink" title="BOM常用对象"></a>BOM常用对象</h2><ol>
<li>Window 对象<ul>
<li>window 对象是当前JS脚本运行所处的窗口，而这个窗口中包含DOM结构，window.document属性就是document对象</li>
<li>在有标签页功能的浏览器中，每个标签都拥有自己的window 对象；也就是说，同一个窗口的标签页之间不会共享一个window对象</li>
<li>全局变量是window变量的属性<ul>
<li><code>var a = 1;window.a == a   // true</code></li>
</ul>
</li>
<li>内置函数普遍是window的方法<ul>
<li><code>如setInterval、alert </code></li>
<li><code>window.alert ==alert // true</code></li>
<li><code>window.hasOwnProperty(&#39;alert&#39;) // true</code></li>
</ul>
</li>
</ul>
</li>
<li>Navigator 对象<ul>
<li>window.navgator 属性可以检索navigator对象，它内部含有用户此次活动的浏览器的相关属性和标识<ul>
<li>appName 浏览器官方名称</li>
<li>appVersion 浏览器版本</li>
<li>userAgent 浏览器用户代理（含有内核信息和封装壳信息）</li>
<li>platform 用户操作系统</li>
</ul>
</li>
</ul>
</li>
<li>History 对象<ul>
<li>window.history 对象提供了操作浏览器会话历史的接口</li>
<li>常用的操作就是模拟浏览器的回退按钮</li>
<li><code>history.back() history.go(-1)</code></li>
</ul>
</li>
<li>History 对象<ul>
<li>window.location 标识当前所在网址，可以通过给这个属性赋值命令浏览器进行页面跳转</li>
<li>重新加载当前页面</li>
<li>可以调用location的reload方法以重新加载当前页面，参数true标识强制从服务器加载</li>
<li>GET请求查询参数<ul>
<li>window.location.search 属性即为当前浏览器的GET请求查询参数</li>
</ul>
</li>
</ul>
</li>
<li>窗口尺寸相关属性<ul>
<li>innerHeight<ul>
<li>浏览器窗口的内容区域的高度，包含水平滚动条（如果有的话）</li>
</ul>
</li>
<li>innerWidth<ul>
<li>浏览器窗口的内容区域宽度，包含垂直滚动条（如果有的话）</li>
</ul>
</li>
<li>outerHeight<ul>
<li>浏览器窗口的外部高度</li>
</ul>
</li>
<li>outerWidth<ul>
<li>浏览器窗口的外部宽度</li>
</ul>
</li>
<li>获得不包含滚动条的窗口宽度，要用 document.documentElement.clientWidth</li>
<li>resize 事件<ul>
<li>在窗口大小改变以后，就会触发resize事件，可以使用window.onresize或者window.addEventListener(‘resize’) 来绑定事件处理函数</li>
</ul>
</li>
<li>已卷动高度<ul>
<li>window.scrollY 属性表示在垂直方向已滚动的像素值</li>
</ul>
</li>
<li>已动高度<ul>
<li>document.documentElement.scrollTop 属性也表示窗口卷动高度</li>
<li>document.documentElement.scrollTop 不是只读的，window.scrollY 属性是只读的</li>
</ul>
</li>
<li>scroll事件<ul>
<li>在窗口被卷动之后，就会触发scroll事件，可以使用 window.onscroll 或者 window.addEventListener(‘scroll’) 来绑定事件处理函数</li>
</ul>
</li>
<li>DOM元素都有offsetTop属性，表示此元素定位到祖先元素的垂直距离<ul>
<li>定位祖先元素：在祖先中，离自己最近的且拥有定位属性的元素</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 面向对象2</title>
    <url>/2024/06/03/Java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A12/</url>
    <content><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ol>
<li>概念<ul>
<li>一种类与类之间的关系</li>
<li>使用已存在的类定义作为基础建立新类</li>
<li>新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但 <em><strong>不能选择性地继承父类</strong></em></li>
<li><strong>满足 “A is a B”的关系就可以形成继承关系</strong></li>
<li>子类可以访问父类非私有成员</li>
<li>父类不可以访问子类特有成员</li>
</ul>
</li>
<li>方法重写<ul>
<li>语法规则<ul>
<li>在子类中定义，去重写父类的方法</li>
<li>方法名相同，参数列表相同（参数顺序、个数、类型）<ul>
<li><strong>方法名、参数列表都要与父类继承的方法相同</strong></li>
</ul>
</li>
<li>访问修饰符<ul>
<li>允许改变，但是访问范围需要大于等于父类的访问范围</li>
</ul>
</li>
<li><strong>与方法的参数名无关</strong></li>
<li>方法返回值<ul>
<li>当方法返回值是void 或基本数据类型时，必须相同；当返回值是引用类型时，可以是父类或其子类</li>
</ul>
</li>
<li><em><strong>方法的返回值和访问修饰符是可以允许有变化的（有条件的）</strong></em></li>
</ul>
</li>
<li>当子类重写父类方法后，子类对象调用的是重写后的方法。</li>
<li>super：父类对象的引用  super.父类方法名()</li>
<li>父类的构造不允许被继承；不允许被重写，但是会影响子类的实例化过程</li>
</ul>
</li>
<li>特点<ul>
<li>利于代码复用</li>
<li>缩短开发周期</li>
</ul>
</li>
<li>语法<ul>
<li>使用 extends 实现封装</li>
<li>单一继承，只能有一个父类</li>
<li>名词解释<ul>
<li>父类（基类）</li>
<li>子类（派生类）</li>
</ul>
</li>
<li>继承后的初始化顺序<ul>
<li><em><strong>父类静态成员 -&gt; 子类静态成员 -&gt; 父类对象构造 -&gt; 子类对象构造</strong></em></li>
<li>访问修饰符不影响成员加载顺序，跟书写位置有关</li>
</ul>
</li>
</ul>
</li>
<li><strong>super</strong><ul>
<li>代表父类引用<ul>
<li>访问父类成员方法<ul>
<li>super.print();</li>
</ul>
</li>
<li>访问父类属性<ul>
<li>super.name;</li>
</ul>
</li>
<li>访问父类构造方法<ul>
<li>super()</li>
</ul>
</li>
</ul>
</li>
<li>子类的构造的过程中必须调用其父类的构造方法</li>
<li>如果子类的构造方法中没有显式标注，则系统默认调用父类无参的构造方法</li>
<li>如果子类构造方法中既没有显式标注，且父类中没有无参的构造方法，则编译错误。</li>
<li>子类构造默认调用父类无参构造方法，可以通过 super() 调用父类的允许被访问的其他构造方法，super() 必须放在子类构造函数有效代码的第一行。</li>
<li>构造方法调用时，super 和 this 不能同时出现</li>
</ul>
</li>
<li>Object 类<ul>
<li>概念<ul>
<li>Object 类是所有类的父类</li>
<li>一个类没有使用 extends 关键字明确标识继承关系，则默认继承 Object 类（包括数组）</li>
<li>Java 中的每个类都可以使用 Object 中定义的方法</li>
</ul>
</li>
</ul>
</li>
<li>final 关键字<ul>
<li>final class<ul>
<li>该类没有子类</li>
<li>public final class | final public class 写法都行</li>
</ul>
</li>
<li>final 方法<ul>
<li>该方法不允许被子类重写，但是可以正常被子类继承使用</li>
</ul>
</li>
<li>final 变量<ul>
<li>方法内局部变量<ul>
<li>只要在具体使用之前进行赋值即可，一旦赋值不允许修改</li>
</ul>
</li>
<li>类中成员属性<ul>
<li>赋值过程<ul>
<li>定义的时候直接初始化</li>
<li>构造方法中</li>
<li>构造代码块</li>
</ul>
</li>
</ul>
</li>
<li>基本数据类型的变量<ul>
<li>初始赋值之后不能更改</li>
</ul>
</li>
<li>引用类型的变量<ul>
<li>初始化之后不能再指向另一个对象，但对象的内容是可变的</li>
</ul>
</li>
</ul>
</li>
<li>final +  static 定义后，在程序运行中不允许二次修改。<ul>
<li>可以修饰方法和变量</li>
<li>修饰配置信息 public static final String URL &#x3D; “<a href="http://www.xxx.com/">www.xxx.com</a>“</li>
</ul>
</li>
<li>final 不允许加载构造方法前面</li>
<li>使用 final 修饰可以提高性能，但会降低可扩展性</li>
</ul>
</li>
<li>注解<ul>
<li>JDK1.5 版本引入的一个特性</li>
<li>可以声明在包、类、属性、方法、局部变量、方法参数等的前面，用来对这些元素进行说明、注释</li>
<li>一种特殊的标记</li>
<li>常用注解<ul>
<li>@Override 针对父类方法进行重写的形式</li>
</ul>
</li>
<li>分类<ul>
<li>按照运行机制分<ul>
<li>源码注解<ul>
<li>注解只在源码阶段保留，在编译阶段会被丢弃。例如：@Overide</li>
</ul>
</li>
<li>编译时注解<ul>
<li>注解会在编译时期保留，在加载 class 文件时会被丢弃。例如：@NotNull</li>
</ul>
</li>
<li>运行时注解<ul>
<li>在运行阶段还起作用，甚至会影响运行逻辑的注解。@Autowired</li>
</ul>
</li>
</ul>
</li>
<li>按照来源分<ul>
<li>来自 JDK 的注解<ul>
<li>@Override</li>
</ul>
</li>
<li>来自第三方的注解<ul>
<li>框架的注解</li>
</ul>
</li>
<li>我们自定义的注解</li>
</ul>
</li>
<li>元注解<ul>
<li>对注解进行注解<ul>
<li>对注解进行标注</li>
</ul>
</li>
<li>@Target 限定注解可以用在什么地方</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><ol>
<li>公有的 ：public<ul>
<li>允许在任意位置访问</li>
</ul>
</li>
<li>私有的：private<ul>
<li>只允许在本类中进行访问</li>
</ul>
</li>
<li>受保护的：protected<ul>
<li>允许在当前类、同包子类&#x2F;非子类、跨包子类调用、跨包非子类不允许</li>
</ul>
</li>
<li>默认<ul>
<li>允许在当前类、同包子类&#x2F;非子类调用；跨包子类&#x2F;非子类不允许调用</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 面向对象3</title>
    <url>/2024/06/03/Java-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A13/</url>
    <content><![CDATA[<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ol>
<li>基本概念<ul>
<li>同一种行为，在不同的对象上，会产生不同的显示结果。</li>
<li>允许不同类的对象对同一消息做出不同的响应</li>
<li><strong>编译时多态</strong><ul>
<li>设计时多态 方法重载</li>
</ul>
</li>
<li><em><strong>运行时多态（通常说的这个）</strong></em><ul>
<li>程序运行时动态决定调用哪个方法</li>
</ul>
</li>
<li>必要条件<ul>
<li>满足继承关系</li>
<li>父类引用指向子类对象</li>
</ul>
</li>
</ul>
</li>
<li>使用<ul>
<li>父类引用子类实例 <ul>
<li>向上转型、隐式转型、自动转型</li>
<li>父类引用指向子类实例，可以调用子类重写父类的方法以及父类派生的方法，无法调用子类独有方法。</li>
<li>小类转型大类</li>
<li>父类 static 方法，不允许子类重写</li>
<li>向上转型后，只能调用到父类原有的静态方法</li>
</ul>
</li>
<li>子类引用指向父类实例<ul>
<li>向下转型、强制类型转换</li>
<li>子类引用指向父类对象，此时必须进行强转，可以调用子类独有方法</li>
<li>必须满足转换条件才能进行强转<ul>
<li><em><strong>对象 instanceof 类</strong></em></li>
<li>判断对象是否是类的实例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span>  <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="type">Cat</span> <span class="variable">temp</span> <span class="operator">=</span> (Cat)one</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>抽象类（abstract）<ul>
<li><strong>Java 中使用抽象类，限制实例化</strong><ul>
<li>通过 abstract 修饰的类，就是抽象类</li>
<li>不允许实例化，可以通过向上转型，指向子类实例</li>
</ul>
</li>
<li>通过abstract 修饰的方法，就是抽象方法<ul>
<li>public abstract void eat(); </li>
<li><em><strong>子类必须实现这个方法！</strong></em></li>
</ul>
</li>
<li>应用场景<ul>
<li>某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法。</li>
<li><em><strong>避免设计随意性，无意义父类实例化</strong></em></li>
</ul>
</li>
<li>使用规则<ul>
<li>1、abstract 定义抽象类</li>
<li>2、抽象类不能直接实例化，只能被继承，可以通过向上转型完成对象实例</li>
<li>3、abstract 定义抽象方法，不需要具体实现</li>
<li>4、包含抽象方法的类是抽象类</li>
<li>5、抽象类中可以没有抽象方法</li>
<li>6、static final  private 不能与 abstract 并存</li>
</ul>
</li>
</ul>
</li>
<li>接口（interface）<ul>
<li>基本概念<ul>
<li>接口定义了某一批类所需要遵守的规范</li>
<li>接口不关心这些类的内部数据，也不关心这些类里的方法的实现细节，它只规定这些类里必须提供某些方法</li>
</ul>
</li>
<li>语法：<ul>
<li>[修饰符] interface 接口名 [extends 付接口1, 父接口2…]<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   零个到多个常量定义...</span><br><span class="line">   零个到多个抽象方法定义...</span><br><span class="line">   零个到多个默认方法的定义.... (jdk1<span class="number">.8</span>新增)</span><br><span class="line">   零个到多个静态方法的定义... (jdk <span class="number">1.8</span>新增)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>使用注意：<ul>
<li>一个类可以实现多个接口，通过逗号分割。 implements</li>
<li>接口的实现要放在继承后面，一个类只能继承唯一父类，但可以实现若干个接口。实现接口的时候要去重写接口待重写的方法。否则通过 abstract 定义抽象类</li>
<li>接口也可以实现继承关系，并且可以继承多个父接口，用逗号分开</li>
<li>如果继承多个接口有多个重名的方法，子类不知道该实现哪个接口的方法，可以重写重名的方法。<ul>
<li>如果继承父类的同时，也继承方法。它们都有同名的方法，默认继承父类方法。</li>
</ul>
</li>
</ul>
</li>
<li>代码示例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">package</span> com.zzz.tel;</span><br><span class="line">   <span class="comment">// 接口访问修饰符：public 默认</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">INet</span> &#123;</span><br><span class="line"> <span class="comment">/*接口中抽象方法可以不写abstract关键字</span></span><br><span class="line"><span class="comment">   /*访问修饰符默认public</span></span><br><span class="line"><span class="comment">    * 当类实现接口时，需要去实现接口中的所有抽象方法，否则需要将该类设置为抽象类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">network</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接口中可以包含常量，默认public static final</span></span><br><span class="line"><span class="type">int</span> TEMP=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//default：默认方法 可以带方法体 jdk1.8后新增</span></span><br><span class="line"><span class="comment">//可以在实现类中重写，并可以通过接口的引用调用</span></span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">connection</span><span class="params">()</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;我是接口中的默认链接&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//static:静态方法 可以带方法体 jdk1.8后新增</span></span><br><span class="line"><span class="comment">//不可以在实现类中重写，可以同接口名调用</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;我是接口中的静态方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>内部类<ul>
<li>在 Java 中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。</li>
<li>与之对应，包含内部类的类被称为外部类</li>
<li>内部类隐藏在外部类之内，更好的实现了信息的隐藏。不允许其它类随意的访问。</li>
<li>内部类分类<ul>
<li>1、成员内部类<ul>
<li>内部类中最常见的就是成员内部类，也称普通内部类</li>
<li>1、内部类在外部使用时，无法直接实例化，需要借由外部类的信息才能完成实例化</li>
<li>2、内部类的访问修饰符，可以任意，但是访问范围会受到影响</li>
<li>3、内部类可以直接访问外部类的成员，如果出现同名属性，优先访问内部类中定义的</li>
<li>4、可以使用 外部类.this.成员 的方式，访问外部类中同名的信息</li>
<li>5、外部类访问内部类信息，需要通过内部类实例，无法直接访问</li>
<li>6、内部类编译后 .class 文件命名：外部类$内部类.class</li>
<li>内部类的获取方式<ul>
<li>1、new 外部类.new 内部类</li>
<li>2、外部类对象.new 内部类</li>
<li>3、外部类对象.获取方法</li>
</ul>
</li>
</ul>
</li>
<li>2、静态内部类<ul>
<li>【成员共享】静态内部类对象可以不依赖于外部类对象，直接创建</li>
<li>1、静态内部类中，只能直接访问外部类的静态成员，如果需要调用非静态成员，可以通过对象实例</li>
<li>2、静态内部类对象实例时，可以不依赖于外部类对象</li>
<li>3、可以通过  外部类.内部类.静态成员  的方式，访问内部类中的静态成员</li>
<li>4、当内部类属性与外部类属性同名时，默认直接调用内部类中的成员；如果需要访问外部类中的静态属性，则可以通过 外部类.属性 的方式；如果需要访问外部类中的非静态属性，则可以通过 new 外部类().属性 的方式；</li>
</ul>
</li>
<li>3、方法内部类<ul>
<li>定义在外部类方法中的内部类，也称局部类。</li>
<li>1、定义在方法内，作用范围也在方法内</li>
<li>2、和方法内部成员使用规则一样，class 前面不可以添加 public、private、protected、static</li>
<li>3、类中不能包含静态成员</li>
<li>4、类中可以包含 final、abstract 修饰的成员</li>
</ul>
</li>
<li>4、匿名内部类<ul>
<li>将类的定义与类的创建，放到一起完成</li>
<li>1、匿名内部类没有类型名称、实例对象名称</li>
<li>2、编译后的文件命名：外部类$数字.class</li>
<li>3、无法使用 private、public、protected、abstract、static 修饰</li>
<li>4、无法编写构造方法，可以添加代码块</li>
<li>5、不能出现静态成员</li>
<li>6、匿名内部类可以实现接口也可以继承父类，但是不可兼得</li>
<li>适用场景<ul>
<li>1、只有到类的一个实例</li>
<li>2、类在定义后马上用到</li>
<li>3、给类命名并不会导致代码更容易被理解</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript 基本数据类型</title>
    <url>/2024/06/14/Javascript-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="数据类型简介和检测"><a href="#数据类型简介和检测" class="headerlink" title="数据类型简介和检测"></a>数据类型简介和检测</h2><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ol>
<li>null 类型<ul>
<li>表示“空”，它是“空对象”</li>
<li>当我们需要将对象销毁、数组销毁或者删除事件监听时，通常将它们设置为null<ul>
<li><code>box.click = null</code></li>
</ul>
</li>
<li><strong>使用 typeof 检测 null 值，结果是object，这点尤其要注意</strong></li>
<li>类型和typeof 检测结果并不是一一对应的，比如数组用typeof检测出来的结果也是object</li>
</ul>
</li>
<li>undefined 类型<ul>
<li>一个没有被复制的变量的默认值是undefined，而undefine的类型也是undefined</li>
<li>即：undefined又是值，又是一种类型，这种类型只有它自己一个值</li>
</ul>
</li>
<li>布尔类型  （Boolean）<ul>
<li>布尔型值只有两个：true 和 fasle，分别表示真和假</li>
</ul>
</li>
<li>字符串类型（String）<ul>
<li>字符串要用引号包裹，双引号或者单引号均可</li>
<li>加号可以用来拼接多个字符串</li>
<li>空字符串，直接写闭合的引号即可</li>
<li>字符串的 length 属性表示字符串的长度</li>
<li>字符串的常用方法<ul>
<li>charAt()<ul>
<li>得到指定位置字符</li>
</ul>
</li>
<li>substring()<ul>
<li>提取子串<ul>
<li>substring(a,b) 方法得到从 a 开始到b结束（不包含b处）的子串</li>
<li>如果省略第二个参数，返回字符串一直到字符串的结尾</li>
<li>substring(a,b) 中，a 可以大于 b ，数字顺序将自动调整为小数在前</li>
</ul>
</li>
</ul>
</li>
<li>substr()<ul>
<li>提取子串<ul>
<li>substr(a,b) 方法得到从 a 开始的 长度为b的子串<ul>
<li>子串的长度而不是编号</li>
</ul>
</li>
<li>substr(a,b) 方法 b 参数可以省略，表示到文档的结尾</li>
<li>substr(a,b) 方法中，a可以是负数，表示倒数位置</li>
</ul>
</li>
</ul>
</li>
<li>slice()<ul>
<li>提取子串<ul>
<li>slice(a,b) 方法得到从 a 开始到b结束（不包含b处）的子串</li>
<li>slice(a,b) 方法 a 参数可以是负数</li>
<li>slice(a,b) 方法 a 参数必须小于b</li>
</ul>
</li>
</ul>
</li>
<li>toUpperCase()<ul>
<li>将字符串变为大写</li>
</ul>
</li>
<li>toLowerCase()<ul>
<li>将字符串变为小写</li>
</ul>
</li>
<li>indexOf()<ul>
<li>检索字符串<ul>
<li>返回某个字符串值在首次出现的位置</li>
<li>如果检测的字符串值没有出现，则返回-1</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>数字类型（Number）<ul>
<li>所有数字不分大小、不分整浮、不分正负、都是数字类型</li>
<li>小数中，零是可以省略的</li>
<li>较大数或较小数（绝对值比较小），可以写成科学计数法<ul>
<li>例：3e8、3e-4</li>
</ul>
</li>
<li>不同进制的数字<ul>
<li>二进制数值以0b开头  例：0b10</li>
<li>八进制数值以0开头  例：017</li>
<li>十六进制以0x开头  例如：0x156</li>
</ul>
</li>
<li>一个特殊的数字型值NaN<ul>
<li>NaN是英语 “not a number” 的 意思，即“不是一个数”，但它是一个数字类型的值</li>
<li>typeof NaN    &#x2F;&#x2F; number</li>
<li>0&#x2F;0 的结果就是NaN，事实上，在数学运算中，若结果不能得到数字，其结果往往都是NaN</li>
<li>NaN有一个“奇怪”的性质，不自等。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h2><ol>
<li>其它值 -&gt; 数值<ul>
<li>Number() 系统内置的构造函数</li>
<li>parseInt() 函数</li>
<li>parseFloat() 函数</li>
</ul>
</li>
<li>其它值 -&gt; 字符串<ul>
<li>String() 函数 系统内置的构造函数</li>
<li>toString() 方法，几乎所有的值都有该方法</li>
<li><em>当数值直接调用 toString() 方法的时候，要加上括号 例：(5).toString()</em></li>
</ul>
</li>
<li>其它值 -&gt; 布尔值<ul>
<li>Boolean() 函数</li>
</ul>
</li>
</ol>
<h2 id="复杂数据类型简介"><a href="#复杂数据类型简介" class="headerlink" title="复杂数据类型简介"></a>复杂数据类型简介</h2><ol>
<li>对象  Object</li>
<li>方法 Function</li>
<li>复杂数据类型都是“引用类型”</li>
</ol>
<h2 id="typeof-运算符可以检测值或者变量的类型"><a href="#typeof-运算符可以检测值或者变量的类型" class="headerlink" title="typeof 运算符可以检测值或者变量的类型"></a>typeof 运算符可以检测值或者变量的类型</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">5</span>; </span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;shanmu&quot;</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>typeof 不是内置函数 是操作符</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>【踩坑】uni.navigateTo 微信小程序 跳转无效问题</title>
    <url>/2024/04/17/%E3%80%90%E8%B8%A9%E5%9D%91%E3%80%91uni-navigateTo-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%B7%B3%E8%BD%AC%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>最近接手了一个项目，该项目在用户体验上极度不友好，如：每次请求就显示 loading ，自定义 tabbar 可点击区域太小，组件间切换白屏等等问题。本着 “要改革、就不要怕” 的原则，便大刀阔斧的对项目代码进行一系列优化。</p>
</blockquote>
<p>结果改着改着就出现了问题：</p>
<ul>
<li>分包 packageB 的路径能点击</li>
<li>packageA、packageC 里的路径不能点击</li>
<li>手机能点击、模拟器不能点击</li>
<li>模拟器能点击，手机不能点击</li>
</ul>
<p><img src="/images/emoji/tieba/035.png" alt="图片"></p>
<span id="more"></span>

<h1 id="代码不报错，是最难解决的-bug-！！！"><a href="#代码不报错，是最难解决的-bug-！！！" class="headerlink" title="代码不报错，是最难解决的 bug ！！！"></a>代码不报错，是最难解决的 bug ！！！</h1><p>这让我一度怀疑是 小程序开发者工具问题、小程序基础库版本问题，nodejs 版本问题 、vue-cli 版本问题，<br>然后就 nvm 切换版本、开发者工具卸载删除、基础库版本修改一系列骚操作。。。</p>
<p><strong>马后炮：</strong> 如果代码能跑起来，肯定是没有问题的，微信小程序开发者工具 navigateTo 、redirectTo 、switchTab 、reLaunch 这些基础的 API 无论是哪个基础库都能很好的支持。</p>
<p>大概率不用去想 nodejs 版本问题， 删除掉 node_modules 再重装挺浪费时间的。 所以很多时候都是代码中的问题。</p>
<p>比如我这个 bug 有些链接能跳转 有些不能跳转，就复制能跳转的 链接，<strong>全局检索</strong>。<strong>查找它们其中的差异</strong></p>
<p>问题出现的地方：<br>程序初始化 拦截了 navigateTo、redirectTo、switchTab、reLaunch 这些操作，执行 checkVisitPage 方法，如果链接在白名单列表中且已登录就能跳转，否则唤起登录的弹窗。</p>
<p>”好巧不巧，我把登录弹窗组件删除掉了，因为它在每个页面都写了一遍“，所以点击没有反应。。。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// App.vue</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;</span><br><span class="line">	addInterceptor,</span><br><span class="line">	checkVisitPage</span><br><span class="line">&#125; from &quot;./utils/index.js&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">	globalData: &#123;</span><br><span class="line">		systemInfo: null</span><br><span class="line">	&#125;,</span><br><span class="line">	onLaunch: function () &#123;</span><br><span class="line">		this.initApp();</span><br><span class="line">	&#125;,</span><br><span class="line">	methods: &#123;</span><br><span class="line">		initApp() &#123;</span><br><span class="line">			addInterceptor.call(this);</span><br><span class="line">			checkVisitPage.call(this);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// utils/index.js</span><br><span class="line">const openPages = [</span><br><span class="line">	&#x27;/pages/home/index&#x27;,</span><br><span class="line">	&#x27;/pages/webView/index&#x27;,</span><br><span class="line">	...</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export function checkVisitPage(url) &#123;</span><br><span class="line">	if (!url) &#123;</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line">	if (url.indexOf(&quot;?&quot;) &gt; -1) &#123;</span><br><span class="line">		url = url.split(&quot;?&quot;)[0];</span><br><span class="line">	&#125;</span><br><span class="line">	if (!openPages.includes(url)) &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			const userInfo = uni.getStorageSync(&#x27;userInfo&#x27;);</span><br><span class="line">			if (!userInfo.accessToken || userInfo?.userType == 7) &#123;</span><br><span class="line">				this.$store.commit(&#x27;common/setPurviewWarningMethod&#x27;, true)</span><br><span class="line">				return false;</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				this.$store.commit(&#x27;common/setPurviewWarningMethod&#x27;, false)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; catch (e) &#123;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function addInterceptor() &#123;</span><br><span class="line">	uni.addInterceptor(&#x27;navigateTo&#x27;, &#123;</span><br><span class="line">		invoke: (e) =&gt; checkVisitPage.call(this, e.url),</span><br><span class="line">	&#125;)</span><br><span class="line">	uni.addInterceptor(&#x27;redirectTo&#x27;, &#123;</span><br><span class="line">		invoke: (e) =&gt; checkVisitPage.call(this, e.url),</span><br><span class="line">	&#125;)</span><br><span class="line">	uni.addInterceptor(&#x27;switchTab&#x27;, &#123;</span><br><span class="line">		invoke: (e) =&gt; checkVisitPage.call(this, e.url),</span><br><span class="line">	&#125;)</span><br><span class="line">	uni.addInterceptor(&#x27;reLaunch&#x27;, &#123;</span><br><span class="line">		invoke: (e) =&gt; checkVisitPage.call(this, e.url),</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>其它：如果无法跳转，请检查 是否 &#x2F; 斜杆开头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uni.navigateTo(&#123;</span><br><span class="line">	url: &#x27;/pages/index/index&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





<blockquote>
<p>因为这两天给环境整崩溃了，某些老项目没有 yarn.lock 或 package-lock 文件 ，代码 dev 能启动起来，但是 build 失败！，怀疑是 nodejs 版本问题，typescript 版本不兼容问题等等，最后向原来的开发人员，重新套了个壳， 才知道 package.json 少了 esbuild-loader 依赖！ 为啥源码里 package.json  没有 esbuild-loader …</p>
</blockquote>
<p>但是错误提示可不友好，让你根本搜索不到错误发生的原因</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[tsl] ERROR in \node_modules\@types\node\util.d.ts(1656,1)</span><br><span class="line">      TS1128: Declaration or statement expected.</span><br><span class="line">ERROR in \node_modules\@types\node\util.d.ts</span><br><span class="line"></span><br><span class="line">[tsl] ERROR in \node_modules\@types\node\util.d.ts(1654,26)</span><br><span class="line">      TS1005: &#x27;;&#x27; expected.</span><br></pre></td></tr></table></figure>




<h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><ol>
<li>能自己解决的尽量不麻烦别人，遇到问题首先 谷歌，GPT 查询（此操作最好不要超过 1小时）</li>
<li>仔细阅读源码，全局检索 查找它们其中的差异</li>
<li>善于交流、勇于交流。（在不得已要麻烦别人的时候，也不要害怕。 出门靠朋友~ 态度好点虚心求教，很多人愿意帮你的）</li>
<li>站起来喝杯咖啡吧！有时候把事情缓一缓。解决问题的思绪就来了</li>
</ol>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>uni-app</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>定时器和延时器</title>
    <url>/2024/06/15/%E5%AE%9A%E6%97%B6%E5%99%A8%E5%92%8C%E5%BB%B6%E6%97%B6%E5%99%A8/</url>
    <content><![CDATA[<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><ol>
<li>setInterval()  函数可以重复调用一个函数，在每次调用之间具有固定的时间间隔<ul>
<li>第一个参数是函数</li>
<li>第二个参数是间隔时间，以毫秒为单位，1000毫秒是1秒</li>
<li>函数可以接受3，4….个参数，它们将按照顺序传入函数</li>
<li>具名函数也可以传入serInterval （有名称的函数），但是不能加上括号，不加括号说明传入是 函数，加括号说明是传入执行体（会立即执行，起不到定时执行的效果）</li>
</ul>
</li>
</ol>
<h2 id="清除定时器"><a href="#清除定时器" class="headerlink" title="清除定时器"></a>清除定时器</h2><ol>
<li>clearInterval() 函数可以清除定时器，入参传入定时器名称</li>
</ol>
<h2 id="延时器"><a href="#延时器" class="headerlink" title="延时器"></a>延时器</h2><ol>
<li>setTimeout() 函数可以设置一个延时器，当指定时间到了之后，会执行函数一次，不会重复执行</li>
<li>clearTimeout() 函数可以清除延时器</li>
</ol>
<h2 id="初步认识异步语句"><a href="#初步认识异步语句" class="headerlink" title="初步认识异步语句"></a>初步认识异步语句</h2><ol>
<li>setInterval 和 setTimeout 是两个异步语句</li>
<li>异步（asynchronous）: 不会阻塞CPU继续执行其它语句，当异步完成时，会执行“回调函数”（callback）</li>
</ol>
<h2 id="使用定时器实现动画"><a href="#使用定时器实现动画" class="headerlink" title="使用定时器实现动画"></a>使用定时器实现动画</h2><ol>
<li>使用定时器实现动画较为不便：<ul>
<li>1、不方便根据动画总时间计算步长</li>
<li>2、运动方向要设置正负</li>
<li>3、多种运动进行叠加较为困难（比如一个放下一边移动一边变为圆形）</li>
</ul>
</li>
</ol>
<h2 id="JS和CSS3结合实现动画"><a href="#JS和CSS3结合实现动画" class="headerlink" title="JS和CSS3结合实现动画"></a>JS和CSS3结合实现动画</h2><ol>
<li>CSS3的transition过渡属性可以实现动画</li>
<li>JavaScript可以使用css3的transtion属性轻松实现元素动画</li>
<li>JS和CSS3结合实现动画规避了定时器制作动画的缺点</li>
</ol>
<h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><ol>
<li>一个函数执行一次后，只有大于设定的执行周期后才允许执行第二次</li>
<li>函数节流非常容易实现，只需要借助setTimeout()延时器</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 添加 Disqus 评论系统</title>
    <url>/2024/04/14/hexo-%E6%B7%BB%E5%8A%A0-Disqus-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="登录-Disqus"><a href="#登录-Disqus" class="headerlink" title="登录 Disqus"></a>登录 Disqus</h3><p><img src="https://raw.githubusercontent.com/zhihuzeye/zhihuzeye.github.io/main/images/20240414002939.png" alt="图片" title="disqus登录"></p>
<h3 id="选择-在我的网站上安装-Disqus"><a href="#选择-在我的网站上安装-Disqus" class="headerlink" title="选择 在我的网站上安装 Disqus"></a>选择 在我的网站上安装 Disqus</h3><p><img src="/images/20240414003055.png" alt="图片" title="disqus登录"></p>
<h3 id="创建一个新站点"><a href="#创建一个新站点" class="headerlink" title="创建一个新站点"></a>创建一个新站点</h3><p>注意：Website Name 这个字段非常重要，后续需要在 _config.yml 中用到<br>点击 Create Site 按钮即可</p>
<p><img src="/images/20240414003325.png" alt="图片" title="disqus登录"></p>
<span id="more"></span>

<h3 id="配置主题-config-yml-文件"><a href="#配置主题-config-yml-文件" class="headerlink" title="配置主题 _config.yml 文件"></a>配置主题 _config.yml 文件</h3><p>网上有很多教程 直接配置，这样是不对的，配置会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">disqus:</span><br><span class="line">  enable: true</span><br><span class="line">  shortname:your Website Name</span><br><span class="line">  count: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>踩坑：disqus  shortname 报错 YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key</p>
<p>shortname 需要换行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">disqus:</span><br><span class="line">  enable: true</span><br><span class="line">  shortname:</span><br><span class="line">          your Website Name</span><br><span class="line">  count: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Disqus</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 vscode SCSS IntelliSense 插件后，$$符号问题</title>
    <url>/2025/06/17/%E5%AE%89%E8%A3%85%20vscode%20SCSS%20IntelliSense%20%E6%8F%92%E4%BB%B6%E5%90%8E%EF%BC%8C$$%E7%AC%A6%E5%8F%B7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><ul>
<li>安装了SCSS IntelliSense ，输入 $,再选择，会多一个 $符号，如：   font-size:$$font-size-xs。有没有办法解决？</li>
</ul>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol>
<li>终端输入命令，打开services文件夹 open &#x2F;Users&#x2F;apple&#x2F;.vscode&#x2F;extensions&#x2F;mrmlnc.vscode-scss-0.10.0&#x2F;out&#x2F;unsafe&#x2F;services</li>
<li>修改 parser.js 文件中的 findDocumentSymbols 方法</li>
</ol>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   async function findDocumentSymbols(document, ast) &#123;</span><br><span class="line">    const symbols = ls.findDocumentSymbols(document, ast);</span><br><span class="line">    const links = await findDocumentLinks(document, ast);</span><br><span class="line">    const result = &#123;</span><br><span class="line">        functions: [],</span><br><span class="line">        imports: convertLinksToImports(links),</span><br><span class="line">        mixins: [],</span><br><span class="line">        variables: []</span><br><span class="line">    &#125;;</span><br><span class="line">    for (const symbol of symbols) &#123;</span><br><span class="line">        const position = symbol.location.range.start;</span><br><span class="line">        const offset = document.offsetAt(symbol.location.range.start);</span><br><span class="line">        if (symbol.kind === vscode_css_languageservice_1.SymbolKind.Variable) &#123;</span><br><span class="line">            result.variables.push(&#123;</span><br><span class="line">                name: symbol.name.replace(&quot;$&quot;, &quot;&quot;), // 关键点</span><br><span class="line">                offset,</span><br><span class="line">                position,</span><br><span class="line">                value: getVariableValue(ast, offset)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (symbol.kind === vscode_css_languageservice_1.SymbolKind.Method) &#123;</span><br><span class="line">            result.mixins.push(&#123;</span><br><span class="line">                name: symbol.name,</span><br><span class="line">                offset,</span><br><span class="line">                position,</span><br><span class="line">                parameters: getMethodParameters(ast, offset)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (symbol.kind === vscode_css_languageservice_1.SymbolKind.Function) &#123;</span><br><span class="line">            result.functions.push(&#123;</span><br><span class="line">                name: symbol.name,</span><br><span class="line">                offset,</span><br><span class="line">                position,</span><br><span class="line">                parameters: getMethodParameters(ast, offset)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>常见问题</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB 入门</title>
    <url>/2024/09/26/MongoDB-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="1-安装-Homebrew"><a href="#1-安装-Homebrew" class="headerlink" title="1. 安装 Homebrew"></a>1. 安装 Homebrew</h3><p>如果还没有安装 Homebrew，可以使用以下命令安装 Homebrew：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>你可以访问 Homebrew 的 <a href="https://brew.sh/">官方网站</a> 了解更多信息。</p>
<h3 id="2-使用-Homebrew-安装-MongoDB"><a href="#2-使用-Homebrew-安装-MongoDB" class="headerlink" title="2. 使用 Homebrew 安装 MongoDB"></a>2. 使用 Homebrew 安装 MongoDB</h3><h4 id="a-添加-MongoDB-官方-Homebrew-Tap"><a href="#a-添加-MongoDB-官方-Homebrew-Tap" class="headerlink" title="a. 添加 MongoDB 官方 Homebrew Tap"></a>a. 添加 MongoDB 官方 Homebrew Tap</h4><p>首先，运行以下命令来添加 MongoDB 官方的 Homebrew Tap（软件源）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap mongodb/brew</span><br></pre></td></tr></table></figure>

<h4 id="b-安装-MongoDB-社区版"><a href="#b-安装-MongoDB-社区版" class="headerlink" title="b. 安装 MongoDB 社区版"></a>b. 安装 MongoDB 社区版</h4><p>接下来，使用 Homebrew 来安装 MongoDB 社区版：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install mongodb-community@6.0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里的 <code>@6.0</code> 是 MongoDB 的版本号，你可以根据需要替换为其他版本。</p>
</blockquote>
<h3 id="3-启动-MongoDB-服务"><a href="#3-启动-MongoDB-服务" class="headerlink" title="3. 启动 MongoDB 服务"></a>3. 启动 MongoDB 服务</h3><p>安装完成后，可以通过 Homebrew 启动 MongoDB：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew services start mongodb/brew/mongodb-community</span><br></pre></td></tr></table></figure>

<p>这会将 MongoDB 作为 macOS 服务启动，并且会在每次系统启动时自动启动。</p>
<p>如果你只想手动启动 MongoDB 而不让它自动运行，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod --config /usr/local/etc/mongod.conf</span><br></pre></td></tr></table></figure>

<h3 id="4-检查-MongoDB-是否运行"><a href="#4-检查-MongoDB-是否运行" class="headerlink" title="4. 检查 MongoDB 是否运行"></a>4. 检查 MongoDB 是否运行</h3><p>你可以运行以下命令，查看 MongoDB 服务是否已经成功启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew services list</span><br></pre></td></tr></table></figure>

<p>MongoDB 的状态应该显示为 “started”。</p>
<h3 id="5-连接-MongoDB"><a href="#5-连接-MongoDB" class="headerlink" title="5. 连接 MongoDB"></a>5. 连接 MongoDB</h3><p>MongoDB 服务器启动后，你可以通过 <code>mongo</code> 命令连接到 MongoDB 的命令行工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure>

<p>如果一切正常，你现在应该已经连接到 MongoDB 的 shell，可以开始使用数据库了。</p>
<h3 id="6-停止-MongoDB-服务"><a href="#6-停止-MongoDB-服务" class="headerlink" title="6. 停止 MongoDB 服务"></a>6. 停止 MongoDB 服务</h3><p>如果你需要停止 MongoDB 服务，可以运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew services stop mongodb/brew/mongodb-community</span><br></pre></td></tr></table></figure>

<hr>
<p>这样，你就可以在 Mac 上成功安装和运行 MongoDB。如果遇到任何问题，请确保 Homebrew 和 MongoDB 的安装路径正确，并查看 Homebrew 提供的安装日志。</p>
]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>一家互联网公司是如何运作的？</title>
    <url>/2024/04/18/%E4%B8%80%E5%AE%B6%E4%BA%92%E8%81%94%E7%BD%91%E5%85%AC%E5%8F%B8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84%EF%BC%9F/</url>
    <content><![CDATA[<blockquote>
<p>当今，互联网公司在全球范围内发挥着日益重要的作用。它们不仅改变了我们的生活方式，还在商业领域产生了深远的影响。本文将探讨一家典型互联网公司的运作方式，深入了解其内部机制和关键流程。通过对互联网公司的运作进行剖析，我们可以更好地理解这些公司如何取得成功，并对未来发展趋势有所启示。</p>
</blockquote>
<h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><table>
<thead>
<tr>
<th>项目角色</th>
<th>岗位职责（概述）</th>
</tr>
</thead>
<tbody><tr>
<td>BDM 市场拓展经理</td>
<td>负责目标客户的拓展和挖掘、搞好客户关系</td>
</tr>
<tr>
<td>BM 商务经理</td>
<td>负责项目的投标、实施及方案解决的沟通</td>
</tr>
<tr>
<td>PM 产品经理</td>
<td>收集、分析用户需求、提需求、画原型</td>
</tr>
<tr>
<td>UE 视觉设计师</td>
<td>根据产品经理原型画设计稿</td>
</tr>
<tr>
<td>FE 前端开发</td>
<td>根据设计稿编写前端代码</td>
</tr>
<tr>
<td>RD 后端开发</td>
<td>设计数据库、对接三方 API、开发接口</td>
</tr>
<tr>
<td>CRD 移动端开发</td>
<td>ios、Android 移动端开发</td>
</tr>
<tr>
<td>QA 测试人员</td>
<td>根据产品需求，软件中的缺陷提 bug</td>
</tr>
</tbody></table>
<span id="more"></span>

<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="一、商务拓展阶段"><a href="#一、商务拓展阶段" class="headerlink" title="一、商务拓展阶段"></a>一、商务拓展阶段</h2><h3 id="市场调研"><a href="#市场调研" class="headerlink" title="市场调研"></a>市场调研</h3><ul>
<li>目标客户的拓展和挖掘</li>
<li>各地市场的考察和调研工作</li>
<li>搞好客户关系</li>
</ul>
<h3 id="招投标"><a href="#招投标" class="headerlink" title="招投标"></a>招投标</h3><ul>
<li>及时关注网路招标信息</li>
<li>投标标书撰写、系统演示讲解、讲述投标方案</li>
</ul>
<h3 id="商务谈判"><a href="#商务谈判" class="headerlink" title="商务谈判"></a>商务谈判</h3><ul>
<li>与客户进行交流细化、收集、分析用户需求</li>
<li>制定可行性合作策略和执行方案</li>
<li>沟通合作意向，并积极促成合作</li>
<li>合作伙伴关系的建立，合同签订</li>
</ul>
<h2 id="二、产品开发阶段"><a href="#二、产品开发阶段" class="headerlink" title="二、产品开发阶段"></a>二、产品开发阶段</h2><h3 id="需求评审"><a href="#需求评审" class="headerlink" title="需求评审"></a>需求评审</h3><ul>
<li>了解项目的需求和目标</li>
<li>积极参与需求讨论、敢于质疑需求是否合理（如：需求是否闭环？、开发难度如何？是否需要其它支持？等等）</li>
<li>不要急于给排期</li>
</ul>
<h3 id="技术方案设计"><a href="#技术方案设计" class="headerlink" title="技术方案设计"></a>技术方案设计</h3><ul>
<li>系统架构设计、模块划分、数据流设计等</li>
<li>确定系统的整体结构和关键模块</li>
<li>找准设计重点、技术上求简单，不过度设计</li>
<li>注意要产出文档（如：数据库设计、接口设计等），交付时用！</li>
<li>多和其他开发人员沟通</li>
</ul>
<h3 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h3><ul>
<li>符合开发规范（git 分支规范、注释的规范、RESTful API 设计规范、模块命名的规范等）</li>
<li>写出开发文档（如组件的使用、单点登录鉴权使用）代码注释</li>
<li>及时写单元测试</li>
<li>Mock API、PostMan 模拟前端请求</li>
<li>Code Review</li>
</ul>
<h3 id="接口评审"><a href="#接口评审" class="headerlink" title="接口评审"></a>接口评审</h3><ul>
<li>RD 后端同学接口开发完成，生成接口文档（Swagger、Yapi ）</li>
<li>FE 前端同学 、CRD 移动端同学 参与接口评审，通过之前 Mock 的数据，给后端同学反馈接口字段是否不足等</li>
</ul>
<h3 id="接口联调"><a href="#接口联调" class="headerlink" title="接口联调"></a>接口联调</h3><ul>
<li>RD 后端同学 和 FE 前端同学、 CRD 移动端通信 接口联调</li>
<li>UE 和 PM 尽早介入 （UE 确定视觉效果、UI 样式走查、PM 确定产品功能）</li>
</ul>
<h3 id="代码自测"><a href="#代码自测" class="headerlink" title="代码自测"></a>代码自测</h3><ul>
<li>查看需求和原型、根据需求描述，自己操作一遍是否符合预期</li>
<li>代码的单元测试</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li>提测发邮件，抄送项目组（如我们在项目组发消息）</li>
<li>测试问题要详细记录（比如：禅道、Teambition 等工具）</li>
<li>有问题及时沟通，QA 测试人员 和 开发人员信息不对称（QA 测试会根据需求跟 PM 确认写测试文档，会偷偷改需求~ ）</li>
</ul>
<h3 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h3><ul>
<li>测试环境没有问题后，就可以发线上环境了（此处可以设置预发环境，预发环境数据库和线上的一样，有时测试数据库和线上数据库不一致，会导致一些不可预知的错误）</li>
<li>上线之后及时通知 QA 回归测试</li>
<li>上线之后及时同步给 PM 和项目组</li>
<li>如有问题，及时回滚，先止损，再排查问题</li>
</ul>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>如何反馈排期？<ul>
<li>给自己预留一点空间，考虑自己的并行工作，从前端开发的角度，可以让设计师、后端给排期，再排期，如果设计师、后端没有给出排期，自己先根据需求给工作量（多少工时能做完）</li>
<li>项目排期 &#x3D; UE 设计时间  + 前后端开发时间 + 接口联调时间 +  自测时间 + 提测上线时间</li>
<li>项目排期前和相关开发人员做好充分沟通</li>
</ul>
</li>
<li>PM 加需求怎么办？<ul>
<li>看情况、如果是改个文案加个字段的简单需求，一般顺手改掉就好了，如果是主流程改动，影响进度了，公司有规定情况，走需求变更流程即可（如：PM 提交需求变更单），没有规定的话发起项目组和 leader 的评审，重新评估排期</li>
</ul>
</li>
<li>已经排完期，项目完不成怎么办？<ul>
<li>加班！排期是自己给的，吃一堑长一智。</li>
</ul>
</li>
<li>QA 提的 bug 无法复现怎么办？<ul>
<li>当面讨论，让他帮忙复现。</li>
</ul>
</li>
<li>怎样才是好的开发节奏？<ul>
<li>前紧后松，项目排完期了后，尽快的完成手头上的开发安排，留多一点时间给自己自测，Code Review，提高自己的代码质量</li>
</ul>
</li>
</ol>
<h2 id="三、交付"><a href="#三、交付" class="headerlink" title="三、交付"></a>三、交付</h2><p>交付一般需提供以下文档：</p>
<ul>
<li>需求规格说明书：包括客户需求、功能规格、非功能性需求等详细描述，是开发团队了解客户需求和开发目标的重要参考。</li>
<li>设计文档：包括软件架构设计、模块设计、数据库设计等，帮助开发人员理解系统设计和实现细节。</li>
<li>用户手册：为最终用户提供软件的使用说明，包括安装步骤、操作指南、常见问题解答等，以便用户能够正确地使用软件。</li>
<li>API 文档：如果软件包含接口，需要提供清晰的 API 文档，包括接口定义、参数说明、返回结果等，方便其他开发者集成和使用。</li>
<li>测试文档：包括测试计划、测试用例、测试报告等，记录了软件的测试过程和结果，验证软件是否符合需求和质量标准。</li>
<li>部署文档：描述软件的部署流程，包括环境要求、安装步骤、配置说明等，确保软件能够顺利部署和运行。</li>
<li>维护文档：包括系统架构、关键模块、重要功能点等说明，方便后续维护人员理解系统结构和代码逻辑。</li>
</ul>
<h2 id="四、市场营销和销售阶段"><a href="#四、市场营销和销售阶段" class="headerlink" title="四、市场营销和销售阶段"></a>四、市场营销和销售阶段</h2><ul>
<li>各种搜索引擎信息流、短视频投放广告、意向客户留言</li>
<li>拨打意向客户电话、促成成交</li>
<li>潜在客户挖掘和拓展（如：有一款电销系统，我要推销给客户，如何挖掘潜在客户？BOSS 直聘查看有哪些公司在招销售人员，天眼查找到公司的法人联系方式，向他推荐该系统。）</li>
</ul>
<hr>
<p><img src="/images/20240419235446.png" alt="图片" title="软件开发流程图"><br><img src="/images/47550_template.png" alt="图片" title="软件项目开发甘特图"></p>
<hr>
<blockquote>
<p>本文是基于 to G（to Government） 的软件开发模式进行探讨，对于互联网的产品自研的公司，一般没有 商务拓展阶段 , 需求从“群众中来 到群众中去”。</p>
<p>本文是个人工作中经验的总结，难免会有问题和理解偏差，如果有问题请进行评论，我也会尽力去改进，自己也在学习的路上，欢迎交流，非常感谢！</p>
</blockquote>
]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>微信消息推送的几种方式</title>
    <url>/2025/07/02/%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="微信消息推送的几种方式"><a href="#微信消息推送的几种方式" class="headerlink" title="微信消息推送的几种方式"></a>微信消息推送的几种方式</h1><h2 id="一、推送方式及对比"><a href="#一、推送方式及对比" class="headerlink" title="一、推送方式及对比"></a>一、推送方式及对比</h2><p>微信平台支持多种消息推送方式，主要包括以下三种：</p>
<table>
<thead>
<tr>
<th>推送方式</th>
<th>使用平台</th>
<th>消息类型</th>
<th>用户接受程度</th>
</tr>
</thead>
<tbody><tr>
<td>小程序推送</td>
<td>微信小程序</td>
<td>模板消息 &#x2F; 服务通知</td>
<td>★★★★★（强提醒）</td>
</tr>
<tr>
<td>服务号推送</td>
<td>微信服务号</td>
<td>模板消息</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>公众号推送</td>
<td>微信订阅号</td>
<td>图文消息 &#x2F; 通知</td>
<td>★★★☆☆</td>
</tr>
</tbody></table>
<blockquote>
<p>✅ <strong>通知强提醒等级排序：服务通知 &gt; 服务号 &gt; 公众号</strong></p>
</blockquote>
<hr>
<h2 id="二、推送效果截图"><a href="#二、推送效果截图" class="headerlink" title="二、推送效果截图"></a>二、推送效果截图</h2><h3 id="1-服务通知截图"><a href="#1-服务通知截图" class="headerlink" title="1. 服务通知截图"></a>1. 服务通知截图</h3><p><img src="/images/WechatIMG406.jpg" alt="服务通知示例"></p>
<hr>
<h3 id="2-服务号通知截图"><a href="#2-服务号通知截图" class="headerlink" title="2. 服务号通知截图"></a>2. 服务号通知截图</h3><p><img src="/images/WechatIMG407.jpg" alt="服务号示例"></p>
<hr>
<h3 id="3-公众号通知截图"><a href="#3-公众号通知截图" class="headerlink" title="3. 公众号通知截图"></a>3. 公众号通知截图</h3><p><img src="/images/WechatIMG408.jpg" alt="公众号示例"></p>
<hr>
<h2 id="三、小程序消息推送说明"><a href="#三、小程序消息推送说明" class="headerlink" title="三、小程序消息推送说明"></a>三、小程序消息推送说明</h2><p>小程序支持不同类型的消息模板推送，其模板分类与使用要求如下：</p>
<h3 id="小程序模板分类说明"><a href="#小程序模板分类说明" class="headerlink" title="小程序模板分类说明"></a>小程序模板分类说明</h3><table>
<thead>
<tr>
<th>类型</th>
<th>类目要求</th>
<th>使用限制</th>
</tr>
</thead>
<tbody><tr>
<td>新版一次性订阅消息</td>
<td>仅支持电商等特定类目</td>
<td>用户订阅后可发送 1 条消息，<strong>无时间限制</strong></td>
</tr>
<tr>
<td>一次性订阅消息</td>
<td>一般类目均可使用</td>
<td>同上</td>
</tr>
<tr>
<td>长期订阅消息</td>
<td>仅限政务民生、医疗、教育等公共服务类目</td>
<td>当前使用方式未公开</td>
</tr>
<tr>
<td>设备订阅消息</td>
<td>公共服务类目，需接入硬件设备支持</td>
<td>每日对单一用户可发送 1 条消息</td>
</tr>
</tbody></table>
<blockquote>
<p>📌 <strong>说明</strong>：新版模板会优先出现在符合类目要求的小程序的公共模板库中。</p>
</blockquote>
<h3 id="模板管理界面示意图"><a href="#模板管理界面示意图" class="headerlink" title="模板管理界面示意图"></a>模板管理界面示意图</h3><p><img src="/images/subscrib.png" alt="小程序订阅模板示意"></p>
<hr>
<h3 id="小程序推送使用场景说明"><a href="#小程序推送使用场景说明" class="headerlink" title="小程序推送使用场景说明"></a>小程序推送使用场景说明</h3><ul>
<li><p><strong>基础订阅场景</strong><br>用户每完成一次订阅授权，开发者即可下发一条消息，<strong>没有时间限制</strong>。即使订阅与实际推送之间间隔很久，也不会失效。</p>
</li>
<li><p><strong>支付关联场景</strong><br>用户在小程序内完成微信支付后，开发者可基于支付订单触发<strong>服务通知</strong>，每笔订单最多可下发 <strong>3 条消息</strong>，该额度与普通订阅消息互不冲突。</p>
</li>
</ul>
<hr>
<h2 id="四、公众号消息推送说明"><a href="#四、公众号消息推送说明" class="headerlink" title="四、公众号消息推送说明"></a>四、公众号消息推送说明</h2><h3 id="公众号消息类型对比"><a href="#公众号消息类型对比" class="headerlink" title="公众号消息类型对比"></a>公众号消息类型对比</h3><table>
<thead>
<tr>
<th>公众号类型</th>
<th>模板消息支持</th>
<th>限制条件</th>
</tr>
</thead>
<tbody><tr>
<td>订阅号</td>
<td>❌ 不支持模板消息</td>
<td>仅支持图文或图文卡片消息</td>
</tr>
<tr>
<td>服务号</td>
<td>✅ 支持模板消息</td>
<td>需企业或组织认证</td>
</tr>
</tbody></table>
<blockquote>
<p>💡 服务号每月可主动向用户推送 <strong>4 条模板消息</strong>，适合企业级服务与重要通知场景。</p>
</blockquote>
<hr>
<h2 id="五、核心流程图"><a href="#五、核心流程图" class="headerlink" title="五、核心流程图"></a>五、核心流程图</h2><p>以下为小程序&#x2F;服务号消息推送核心流程示意图：</p>
<p><img src="/images/xxts.drawio.png" alt="核心流程图"></p>
<hr>
<h2 id="六、总结对比"><a href="#六、总结对比" class="headerlink" title="六、总结对比"></a>六、总结对比</h2><table>
<thead>
<tr>
<th>项目</th>
<th>小程序订阅消息</th>
<th>服务号模板消息</th>
<th>公众号图文推送</th>
</tr>
</thead>
<tbody><tr>
<td>接收强度</td>
<td>★★★★★</td>
<td>★★★★☆</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td>适用场景</td>
<td>支付提醒、任务提醒、系统通知等</td>
<td>用户服务通知</td>
<td>日常图文传播</td>
</tr>
<tr>
<td>限制</td>
<td>需用户主动订阅</td>
<td>企业认证</td>
<td>用户关注即可</td>
</tr>
<tr>
<td>模板多样性</td>
<td>模板需符合类目限制</td>
<td>模板较自由</td>
<td>图文内容为主</td>
</tr>
</tbody></table>
<hr>
<p>如需集成微信消息推送，请结合业务所属类目、目标用户行为和提醒紧急程度，选择最合适的推送方式，以实现更高的用户触达率和业务转化效果。</p>
]]></content>
  </entry>
  <entry>
    <title>微搭 h5 跳转小程序</title>
    <url>/2024/04/28/%E5%BE%AE%E6%90%AD-h5-%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p>场景：小程序内嵌 微搭 H5 页面， 点击 H5 某块区域，跳转到小程序详情页</p>
</blockquote>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default function (&#123; event, data &#125;) &#123;</span><br><span class="line">  const value = data?.target</span><br><span class="line">  try &#123;</span><br><span class="line">    wx.miniProgram.navigateTo(&#123;</span><br><span class="line">      url: `/packageC/houseDetails/index?id=$&#123;value&#125;`,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; catch (err) &#123;</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: `/packageC/houseDetails/index?id=$&#123;value&#125;`,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>报错：事件响应失败:组件container8[tap事件 响应Id wwvcp1rff5h]:wx is not defined</p>
<p><img src="/images/20240428154808.png" alt="图片"></p>
<p>自建的 H5 判断 navigator.userAgent 是微信环境后可以 直接使用  wx.miniProgram.navigateTo Api , 微搭并不支持。</p>
<p>解决方法：<br><a href="https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html">https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html</a></p>
<ol>
<li>微搭应用编辑-&gt;应用设置-&gt;开发设置-&gt;加载外部资源(JS&#x2F;CSS)</li>
<li>将 <a href="https://res.wx.qq.com/open/js/jweixin-1.3.2.js">https://res.wx.qq.com/open/js/jweixin-1.3.2.js</a> 资源下载本地，放到公司 OSS 上</li>
</ol>
<p><img src="/images/20240428160058.png" alt="图片"></p>
]]></content>
      <categories>
        <category>微搭</category>
      </categories>
      <tags>
        <tag>微搭低代码</tag>
      </tags>
  </entry>
  <entry>
    <title>找不到插件依赖 @tarojs/plugin-platform-h5，请先在项目中安装</title>
    <url>/2024/05/04/%E6%89%BE%E4%B8%8D%E5%88%B0%E6%8F%92%E4%BB%B6%E4%BE%9D%E8%B5%96-tarojs-plugin-platform-h5%EF%BC%8C%E8%AF%B7%E5%85%88%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p>运行一个 Taro 的项目，安装完相关依赖后执行命令报错</p>
</blockquote>
<h1 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h1><ul>
<li>yarn install </li>
<li>yarn run start</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正在执行任务: yarn run start </span><br><span class="line"></span><br><span class="line">yarn run v1.22.19</span><br><span class="line">$ npm run dev:h5</span><br><span class="line"></span><br><span class="line">&gt; renthouse-taro@1.0.0 dev:h5</span><br><span class="line">&gt; npm run build:h5 -- --watch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; renthouse-taro@1.0.0 build:h5</span><br><span class="line">&gt; taro build --type h5 --watch </span><br><span class="line"></span><br><span class="line">👽 Taro v3.6.25</span><br><span class="line"></span><br><span class="line">找不到插件依赖 &quot;@tarojs/plugin-platform-h5&quot;，请先在项目中安装，项目路径：D:\xxx\xxx\renthouse-taro</span><br><span class="line">error Command failed with exit code 1.</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.</span><br></pre></td></tr></table></figure>

<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>因为我之前安装过 Taro 最新版本的 cli , 和现有的 Taro 版本不兼容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">taro --version</span><br><span class="line">👽 Taro v3.6.25</span><br><span class="line"></span><br><span class="line">3.6.25</span><br></pre></td></tr></table></figure>


<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol>
<li>npm uninstall -g @tarojs&#x2F;cli  # 卸载 Trao</li>
<li>npm install -g @tarojs&#x2F;<a href="mailto:&#99;&#108;&#x69;&#x40;&#51;&#x2e;&#48;&#x2e;&#x32;&#57;">&#99;&#108;&#x69;&#x40;&#51;&#x2e;&#48;&#x2e;&#x32;&#57;</a>  # 安装指定版本 Trao</li>
<li>也有可能 nodejs 版本过低和 taro&#x2F;cli 不兼容，nvm 切换 16.x 以上版本试试</li>
</ol>
]]></content>
      <tags>
        <tag>Taro</tag>
      </tags>
  </entry>
  <entry>
    <title>文本与字体属性</title>
    <url>/2024/06/12/%E6%96%87%E6%9C%AC%E4%B8%8E%E5%AD%97%E4%BD%93%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h2 id="常用文本样式属性"><a href="#常用文本样式属性" class="headerlink" title="常用文本样式属性"></a>常用文本样式属性</h2><ol>
<li>color<ul>
<li>设置文本内容的前景色<ul>
<li>RGBA ，最后一个表示透明度，0表示纯透明，1表示纯实心</li>
</ul>
</li>
<li>16进制，RGB，RGBA</li>
<li><strong>如果颜色值是#aabbcc的形式，可以简写为#abc</strong><ul>
<li>#ff0000 -&gt; #f00</li>
</ul>
</li>
</ul>
</li>
<li>font-size<ul>
<li>设置字号，单位通常px</li>
</ul>
</li>
<li>font-weight<ul>
<li>normal  正常粗细，与400等值</li>
<li>bold  加粗，与700等值</li>
<li>lighter  更细，大多数中文字体不支持</li>
<li>bolder  更粗，大多数中文字体不支持</li>
</ul>
</li>
<li>font-style<ul>
<li>normal  取消倾斜，比如把天生倾斜的i、em等标签设置为不倾斜</li>
<li>italic  设置为倾斜字体（常用）</li>
<li>oblique  设置为倾斜字体（用常规字体模拟，不常用）</li>
</ul>
</li>
<li>text-decoration<ul>
<li>none  没有修饰线</li>
<li>underline  下划线</li>
<li>line-through  删除线</li>
</ul>
</li>
</ol>
<h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><ol>
<li>color</li>
<li>font-开头的</li>
<li>list-开头的</li>
<li>text-开头的</li>
<li>line-开头的</li>
<li><em><strong>因为文字相关属性有继承性，所以通常会设置body标签的字号、颜色、行高等，这样就能当做整个网页的默认样式了</strong></em></li>
<li><em><strong>在继承的情况下，选择器权重计算失效，而是“就近原则”，继承的不如元素选中的权重大</strong></em></li>
</ol>
<h2 id="字体属性详解"><a href="#字体属性详解" class="headerlink" title="字体属性详解"></a>字体属性详解</h2><ol>
<li>font-family<ul>
<li>字体可以是列表形式，一般英语字体放前面，后面的字体是前面字体的“后备”字体</li>
<li>font-family: serif, “Times New Roman”, “微软雅黑”;</li>
<li>字体名称中有空格，必须用引号包裹</li>
<li>中文字体可以称呼它们的英语名字<ul>
<li>“Microsoft Yahei”  等同于 “微软雅黑”</li>
<li>“SimSun” 等价于 “宋体”</li>
</ul>
</li>
<li><strong>字体通常必须是用户计算机中已经安装好的字体</strong></li>
<li>定义新字体，需要我们有新字体  @font-face</li>
</ul>
</li>
</ol>
<h2 id="段落和行相关属性"><a href="#段落和行相关属性" class="headerlink" title="段落和行相关属性"></a>段落和行相关属性</h2><ol>
<li>text-indent 属性<ul>
<li>定义文本内容首行缩进量</li>
</ul>
</li>
<li>line-height<ul>
<li>定义行高</li>
<li>line-height:30px</li>
<li>line-height:1.5  字号的倍数</li>
<li>line-height:150%   字号的倍数</li>
</ul>
</li>
<li>单行文本垂直居中<ul>
<li>行高&#x3D;盒子高度，即可实现单行文本的垂直居中</li>
</ul>
</li>
<li>text-align:center<ul>
<li>文字水平居中</li>
</ul>
</li>
<li>font 合写属性<ul>
<li>font: italic bold 20px&#x2F;1.5 “阿里妈妈刀隶体 Regular”;</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序关联服务号发送模板消息</title>
    <url>/2025/07/09/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%B3%E8%81%94%E6%9C%8D%E5%8A%A1%E5%8F%B7%E5%8F%91%E9%80%81%E6%A8%A1%E6%9D%BF%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<h1 id="微信小程序关联服务号发送模板消息全流程"><a href="#微信小程序关联服务号发送模板消息全流程" class="headerlink" title="微信小程序关联服务号发送模板消息全流程"></a>微信小程序关联服务号发送模板消息全流程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于微信小程序模板消息有行业限制，且长期模板申请门槛较高，因此在某些业务场景下，使用小程序自身模板消息并不灵活。</p>
<p>针对这种情况，可以通过“微信开放平台”关联小程序与服务号的方式，由服务号代替小程序发送模板消息，从而实现消息通知。</p>
<h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p>要实现小程序与服务号的消息打通，必须完成以下认证操作：</p>
<ol>
<li><strong>微信服务号认证</strong>：费用 ¥300 &#x2F; 年；</li>
<li><strong>微信小程序认证</strong>：费用 ¥300 &#x2F; 年；</li>
<li><strong>微信开放平台认证</strong>：费用 ¥300 &#x2F; 年。</li>
</ol>
<p>⚠️ 注意：三个认证缺一不可。</p>
<h2 id="微信开放平台绑定操作"><a href="#微信开放平台绑定操作" class="headerlink" title="微信开放平台绑定操作"></a>微信开放平台绑定操作</h2><ol>
<li>登录 <a href="https://open.weixin.qq.com/">微信开放平台</a>，完成认证；</li>
<li>在“账号管理”中，绑定你的 <strong>微信小程序</strong> 和 <strong>服务号</strong>。</li>
</ol>
<p>绑定成功后，两个账号将共享同一 <strong>UnionID</strong>，可实现用户身份互通。</p>
<p><img src="/images/WX20250709-174425@2x.png" alt="开放平台绑定示意图"></p>
<h2 id="核心流程详解"><a href="#核心流程详解" class="headerlink" title="核心流程详解"></a>核心流程详解</h2><ol>
<li>用户在<strong>小程序</strong>中登录，获取 <strong>UnionID</strong>；</li>
<li>通过 UnionID 查询对应的 <strong>服务号 openid</strong>；</li>
<li>服务号根据 openid，调用消息推送接口发送模板消息。</li>
</ol>
<p>流程图如下：</p>
<p><img src="/images/sj112sadad1.png" alt="核心流程图解"></p>
<h2 id="核心接口文档参考"><a href="#核心接口文档参考" class="headerlink" title="核心接口文档参考"></a>核心接口文档参考</h2><ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/union-id.html">微信小程序 UnionID 机制说明</a></li>
<li><a href="https://developers.weixin.qq.com/doc/service/api/usermanage/userinfo/api_batchuserinfo.html">微信服务号 批量获取用户基本信息接口</a></li>
</ul>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过微信开放平台绑定小程序与服务号，并结合 UnionID 机制，可以灵活实现小程序与服务号间的消息互通。<br>这种方式适合对消息通知有较高需求的应用场景，是微信官方推荐的解决方案之一。</p>
]]></content>
  </entry>
  <entry>
    <title>流程控制语句</title>
    <url>/2024/06/15/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><ol>
<li>if 语句的基本使用 <ul>
<li>如果…..就…..否则</li>
</ul>
</li>
<li>if elseif 多条件分支<ul>
<li>else if() 条件分支“暗含”不符合之前的所有条件，要深刻理解什么叫“否则如果”</li>
</ul>
</li>
<li>if 语句算法题</li>
<li>switch 语句<ul>
<li>用途：当一个变量被分类讨论的情形</li>
</ul>
</li>
<li>三元运算符<ul>
<li>条件表达式 ? 表达式1 : 表达式2</li>
<li>三元运算的用途：根据某个条件是否成立，在两个不同值中选择变量的值</li>
</ul>
</li>
</ol>
<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><ol>
<li>for 循环语句<ul>
<li>循环通常需要三个参数：起始值、结束值和步长。这些参数可以用for循环来指定。</li>
</ul>
</li>
<li>for 循环算法题<ul>
<li><em><strong>for循环有明确的范围，while循环没有明确的范围</strong></em></li>
</ul>
</li>
<li>while 循环语句<ul>
<li>while 语句 也是一种循环结构，是一种“不定范围”循环，和for循环各有不同的勇武之地</li>
<li>几乎所有编程语言，都提供了for和while语句</li>
<li><em><strong>while 语句事先不指定循环开始、结束范围，只要测试条件满足，就一直执行循环体</strong></em></li>
<li>while 循环没有显式定义循环变量，必须自己在while循环外先定义好循环变量，有时甚至可以没有循环变量</li>
<li>循环体内的语句，必须使循环测试条件趋向不成立，否侧会死循环。</li>
<li>while 循环，while 是 “当”的意思。</li>
<li>更适合while循环的场景<ul>
<li>寻找最小满足n²&gt;456789的整数n</li>
</ul>
</li>
</ul>
</li>
<li>break 和 continue <ul>
<li>break 表示立即终止循环，它只能用在循环语句中，在for循环和while循环中都可以使用</li>
<li>continue 用于 跳过循环中的一个迭代，并继续执行循环中的下一个迭代。for循环更经常使用continue</li>
</ul>
</li>
<li>do while 语句<ul>
<li>是一种“后测试循环语句”，它不同于for循环和while循环每次都是“先测试条件是否满足，然后执行循环体”，do-while循环是“先执行循环体，再测试条件是否满足”</li>
<li>do { 循环体 } while (循环执行条件)</li>
</ul>
</li>
<li>while 语句算法题</li>
</ol>
<h2 id="初识算法"><a href="#初识算法" class="headerlink" title="初识算法"></a>初识算法</h2><ol>
<li>什么是算法<ul>
<li>指的是解题方案的准确而完整的描述。是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制，也就是说，能够对一定规范的输入，在有限的实际内获得所要求的的输出。</li>
<li>算法就是把一个问题，拆解成计算机能够一步一步执行的步骤。</li>
<li>计算机的流程控制语句：顺序执行，选择语句，循环语句。</li>
<li>优秀算法的要求<ul>
<li>正确性</li>
<li>健壮性</li>
<li>可读性</li>
</ul>
</li>
</ul>
</li>
<li>累加器和累乘器</li>
<li>穷举法</li>
<li>综合算法题目</li>
<li>随机数函数<ul>
<li>得到[a,b]区间的整数，公式：</li>
<li><code>parseInt(Math.random()* (b-a + 1)) + a</code></li>
</ul>
</li>
</ol>
<h2 id="如何拆位"><a href="#如何拆位" class="headerlink" title="如何拆位"></a>如何拆位</h2><ol>
<li>数学方法<ul>
<li><code>百位是原数字除以100取整  Math.floor(n/100)</code></li>
<li><code>十位是原数字除以10取整，再与10求模  Math.floor(n/10) % 10</code></li>
<li><code>个位是原数字与10求模  n % 10</code></li>
</ul>
</li>
<li>字符串方法<ul>
<li>直接将原数字 变为字符串，然后再用charAt()方法得到每个数位的值</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>盒模型</title>
    <url>/2024/06/12/%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="认识盒模型"><a href="#认识盒模型" class="headerlink" title="认识盒模型"></a>认识盒模型</h2><ol>
<li>行内元素</li>
<li>块级元素</li>
<li>所有HTML标签都可以看成矩形盒子，由width、height、padding、border构成，称为“盒模型”</li>
</ol>
<h2 id="width和height属性详解"><a href="#width和height属性详解" class="headerlink" title="width和height属性详解"></a>width和height属性详解</h2><ol>
<li>width<ul>
<li>盒子内容的宽度</li>
<li>width属性通常是px，移动端开发会涉及百分数，rem等单位</li>
<li>当块级元素（div、h系列、li等）没有设置width属性是，它将自动撑满，但这并不意味着width可以继承</li>
</ul>
</li>
<li>height<ul>
<li>表示内容的高度</li>
<li>width属性通常是px，移动端开发会涉及百分数，rem等单位</li>
<li>盒子的height属性如果不设置，它将被内容被自动撑开，如果没有内容，则height默认是0</li>
<li>高度省略掉，内容能被自动撑开</li>
</ul>
</li>
</ol>
<h2 id="padding属性详解"><a href="#padding属性详解" class="headerlink" title="padding属性详解"></a>padding属性详解</h2><ol>
<li>padding 是盒子的内边距，即盒子边框内壁到文字的距离</li>
<li>padding 是四个方向的<ul>
<li>padding-top</li>
<li>padding-left</li>
<li>padding-right</li>
<li>padding-bottom</li>
</ul>
</li>
<li>padding 四数值写法<ul>
<li>padding:10px 20px 10px 20px 上右下左</li>
</ul>
</li>
<li>padding 三数值写法 <ul>
<li><em><strong>padding:10px 20px 30px  上 左右 下</strong></em></li>
</ul>
</li>
<li>padding 二数值写法<ul>
<li>padding:10px 20px 上下，左右</li>
</ul>
</li>
<li>padding 一数值写法<ul>
<li>padding:10px  四个方向都是10px</li>
</ul>
</li>
</ol>
<h2 id="margin属性详解"><a href="#margin属性详解" class="headerlink" title="margin属性详解"></a>margin属性详解</h2><ol>
<li>margin是盒子的外边距，盒子和其它盒子之间的距离</li>
<li>margin 是四个方向的<ul>
<li>margin-top</li>
<li>margin-left</li>
<li>margin-right</li>
<li>margin-bottom</li>
</ul>
</li>
<li>margin 四个方向<ul>
<li>margin:10px 20px 10px 20px 上右下左</li>
</ul>
</li>
<li>margin 三数值写法 <ul>
<li><em><strong>margin:10px 20px 30px  上 左右 下</strong></em></li>
</ul>
</li>
<li>margin 二数值写法<ul>
<li>margin:10px 20px 上下，左右</li>
</ul>
</li>
<li>margin 一数值写法<ul>
<li>margin:10px  四个方向都是10px</li>
</ul>
</li>
<li>margin 的塌陷<ul>
<li>垂直方向的margin有塌陷现象：小的margin 会塌陷到大的margin 中，从而margin不叠加，只以大的值为准<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="selector-class">.box5</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: aqua;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">24px</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> <span class="selector-class">.box6</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">28</span>, <span class="number">206</span>, <span class="number">108</span>);</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">32px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">以<span class="attribute">margin-top</span> <span class="number">32px</span> 为准</span><br></pre></td></tr></table></figure></li>
<li>左右方向不会发生塌陷现象</li>
</ul>
</li>
<li>一些元素有默认的margin<ul>
<li>比如（body、ul、p) 等，在开始制作网页的时候，要将它们清除<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> *&#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">body</span>,</span><br><span class="line">    <span class="selector-tag">ul</span>,</span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">* 通配符有效率问题</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>盒子的水平居中<ul>
<li>将盒子左右两边的margin都设置为auto，盒水平居中 </li>
<li>margin:0 auto</li>
<li>文本居中 text-align:center 和盒子水平居中是两个概念</li>
</ul>
</li>
</ol>
<h2 id="盒模型计算"><a href="#盒模型计算" class="headerlink" title="盒模型计算"></a>盒模型计算</h2><ol>
<li>盒子的总宽度 &#x3D; width + 左右border + 左右padding</li>
<li>盒子的总高度 &#x3D; height + 上下border + 上下padding</li>
</ol>
<h2 id="box-sizing属性"><a href="#box-sizing属性" class="headerlink" title="box-sizing属性"></a>box-sizing属性</h2><ol>
<li>将盒子添加 box-sizing:border-box 之后，padding、border 变为内缩，不再外扩</li>
</ol>
<h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><ol>
<li>行内元素<ul>
<li>能并排显示</li>
<li>不能设置宽高</li>
<li>width自动收缩</li>
<li>a、span、em、b、u、i 等</li>
</ul>
</li>
<li>块级元素<ul>
<li>不能并排显示</li>
<li>能设置宽高</li>
<li>width自动撑满</li>
<li>div、section、header、h系列、li、ul等</li>
</ul>
</li>
<li>行内块元素<ul>
<li>img、input等</li>
<li>既能并排显示、又能设置宽高</li>
</ul>
</li>
<li>行内元素和块级元素的互相转换<ul>
<li>display:block<ul>
<li>转换为块级元素</li>
</ul>
</li>
<li>display:inline <ul>
<li>转为行内元素</li>
</ul>
</li>
<li>disaplay:inline-block <ul>
<li>即将元素转为行内块</li>
</ul>
</li>
<li>display:none<ul>
<li>可以将元素隐藏，元素将彻底放弃位置，如同没有写标签一样</li>
</ul>
</li>
<li>visibility:hidden<ul>
<li>也可以将元素隐藏，但是元素不放弃自己的位置</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>背景和渐变</title>
    <url>/2024/06/06/%E8%83%8C%E6%99%AF%E5%92%8C%E6%B8%90%E5%8F%98/</url>
    <content><![CDATA[<h2 id="背景基础知识"><a href="#背景基础知识" class="headerlink" title="背景基础知识"></a>背景基础知识</h2><ol>
<li>背景颜色基础知识<ul>
<li><code>background-color: ;</code></li>
<li>背景颜色可以用十六进制，rgba,rgb,表示</li>
<li>padding 是有背景颜色的</li>
</ul>
</li>
<li>背景图片基础知识<ul>
<li>用来设置背景图片。 background-image: url();</li>
<li>可以是相对路径，绝对路径，网络图片</li>
</ul>
</li>
</ol>
<h2 id="背景图片高级属性"><a href="#背景图片高级属性" class="headerlink" title="背景图片高级属性"></a>背景图片高级属性</h2><ol>
<li>背景图片的重复模式<ul>
<li>background-repeat 属性可以用来设置背景的重复模式</li>
<li>repeat x,y均平铺（默认）</li>
<li>repeat-x x轴平铺</li>
<li>repeat-y y轴平铺</li>
<li>no-repeat 不平铺</li>
</ul>
</li>
<li>背景尺寸<ul>
<li>background-size: 100px 100px; 宽，高</li>
<li>设置背景图片尺寸，兼容到IE9</li>
<li>值也可以用百分比来表示，表示盒子宽高分别百分之多少。</li>
<li>需要等比例设置的值，可以设置auto</li>
<li>contain和cover<ul>
<li>background-size: contain; 表示将背景图片只能改变尺寸以容纳到盒子里</li>
<li>cover表示将背景图片智能改变尺寸以撑满盒子</li>
</ul>
</li>
</ul>
</li>
<li>背景裁切<ul>
<li>background-clip 属性用来设置元素的背景裁切到哪个盒子。兼容到IE9<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box5</span>&#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">10px</span> dotted <span class="number">#000</span>;</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;./images/niaochao.jpg&#x27;</span>);</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">24px</span>;</span><br><span class="line">        <span class="attribute">background-clip</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>border-box 背景延伸至边框（默认值）</li>
<li>padding-box  背景延伸至内边（padding)，不会绘制边框处（仅在dotted、dashed边框可察觉）</li>
<li>content-box 背景被裁剪至内容区</li>
</ul>
</li>
<li>背景固定<ul>
<li>background-attachment 属性决定背景图像的位置是在视口内固定，或者随着包含它的区块滚动<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box4</span>&#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">       <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;./images/gugong.jpg&#x27;</span>);</span><br><span class="line">       <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>fixed 自己滚动条不动，外部滚动条不动</li>
<li>local 自己滚动条动，外部滚动条动</li>
<li>scroll 自己滚动条不动，外部滚动条动（默认值）</li>
</ul>
</li>
<li>用途：视差滚动特效</li>
</ul>
</li>
<li>背景图片位置<ul>
<li><code>background-position: 100px 200px;</code></li>
<li>设置背景图片在盒子的位置</li>
<li>可以用位置描述符  top left right bottom</li>
</ul>
</li>
<li>background综合属性<ul>
<li><code>background: white url(&quot;images/goblin.png&quot;) no-repeat center center;</code></li>
<li>背景颜色，背景图片，背景重复，背景位置</li>
</ul>
</li>
</ol>
<h2 id="渐变背景"><a href="#渐变背景" class="headerlink" title="渐变背景"></a>渐变背景</h2><ol>
<li>线性渐变<ul>
<li><code>background-image: linear-gradient(to right, blue, red);</code></li>
<li>渐变方向，开始颜色，结束颜色</li>
<li>渐变方向可以写成度数，比如45deg</li>
<li>可以有多个颜色值，并且可以用百分数定义它们出现的位置  <code>linear-gradient(to bottom,blue,yellow 20%,red)</code></li>
<li>浏览器私有前缀<ul>
<li>Chrome -webkit-</li>
<li>Firefox -moz-</li>
<li>IE、Edge  -ms-</li>
<li>欧朋  -o-</li>
</ul>
</li>
</ul>
</li>
<li>径向渐变<ul>
<li>盒子可以使用 background-image: radial-gradient(50% 50%,red,blue); 创建径向渐变</li>
<li>参数：圆心坐标，颜色，颜色，颜色</li>
</ul>
</li>
</ol>
<h2 id="CSS精灵（雪碧图，前端优化方案之一）"><a href="#CSS精灵（雪碧图，前端优化方案之一）" class="headerlink" title="CSS精灵（雪碧图，前端优化方案之一）"></a>CSS精灵（雪碧图，前端优化方案之一）</h2><ol>
<li>CSS精灵：将多个小图标合并制作到一张图片上，使用background-position属性单独展示其中一个，这样的技术叫做CSS精灵技术，也叫做CSS雪碧图</li>
<li>减少HTTP请求数，加快网页速度，缺点：不方便测量，后期修改不方便</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>表单元素</title>
    <url>/2024/06/06/%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><ol>
<li>type<ul>
<li>color 颜色选择控件</li>
<li>date、time 日期时间选择控件</li>
<li>email 电子邮件输入控件</li>
<li>file 文件选择控件</li>
<li>number 数字输入控件</li>
<li>range 拖拽条</li>
<li>search 搜索框</li>
<li>url 网址输入控件</li>
<li>button 按钮</li>
<li>submit 提交，在外层为 form 情况下有效</li>
<li>reset 重置</li>
<li>password 密码</li>
<li>radio 单选按钮需要名称设置为一样的</li>
<li>checkbox 多选按钮需要名称设置为一样的</li>
<li>hidden 对用户不可见，隐藏字段</li>
</ul>
</li>
<li>placeholder 提示符</li>
<li>value 值 是否禁用</li>
<li>disabled 是否必填，在外层是form表单情况下有效</li>
<li>required</li>
<li>name</li>
<li>id</li>
<li>list<ul>
<li>设置预选项（list&#x3D;”province-list”）<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;province-list&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;浙江杭州&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;河北石家庄&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;浙江温州&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h2><ol>
<li>name</li>
<li>id</li>
<li>cols 一行显示多少字符</li>
<li>rows 一列显示多少字符</li>
<li>placeholder 提示符</li>
</ol>
<h2 id="select-option"><a href="#select-option" class="headerlink" title="select&#x2F;option"></a>select&#x2F;option</h2><ol>
<li>select</li>
</ol>
<ul>
<li>name</li>
<li>id</li>
<li>disable 是否禁用</li>
<li>multiple 选项是否支持多选</li>
<li>required 是否必填</li>
<li>autofocus 自动获取焦点</li>
<li>autocomplete 自动完成</li>
</ul>
<h2 id="fieldset-legend"><a href="#fieldset-legend" class="headerlink" title="fieldset&#x2F;legend"></a>fieldset&#x2F;legend</h2><ol>
<li>即输入区加有文字的边框。</li>
<li>定义域的标题，即边框上的文字。</li>
</ol>
<h2 id="button"><a href="#button" class="headerlink" title="button"></a>button</h2><ol>
<li>定义一个按钮。</li>
</ol>
<h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><ol>
<li>定义一个控制的标签。如输入框前的文字，用以关联用户的选择。</li>
<li>for</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>表达式与操作符</title>
    <url>/2024/06/15/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="JS-基本表达式"><a href="#JS-基本表达式" class="headerlink" title="JS 基本表达式"></a>JS 基本表达式</h2><ol>
<li>算数表达式<ul>
<li><code>+ 加</code><ul>
<li>加号有“加法”和“连字符”两种作用</li>
<li>如果加号两边操作数都是数字，则为“加法”，否则为连字符</li>
</ul>
</li>
<li><code>- 减</code></li>
<li><code>* 乘</code></li>
<li><code>/ 除</code></li>
<li><code>% 取余</code><ul>
<li>a % b 表示求 a 除以 b 的余数，它不关心整数部分，只关心余数</li>
</ul>
</li>
<li>默认情况，乘除法的优先级要高于加法和减法；必要时可以使用<strong>圆括号</strong>来改变运算的顺序</li>
<li>隐式类型转换<ul>
<li>如果参与数学运算的某操作数不是数字型，那么Javascript会自动将此操作数转换为数字型（不包括 加号 运算符）</li>
<li><code>例：3 * &quot;4&quot; //  12</code></li>
<li>隐式转换的本质是内部调用 Number() 函数</li>
</ul>
</li>
</ul>
</li>
<li>关系表达式<ul>
<li>大于 &gt;</li>
<li>小于 &lt;</li>
<li>大于或等于 &gt;&#x3D;</li>
<li>小于或等于 &lt;&#x3D;</li>
<li>等于 &#x3D;&#x3D;</li>
<li>不等于 !&#x3D;</li>
<li>全等于 &#x3D;&#x3D;&#x3D;</li>
<li>不全等于 !&#x3D;&#x3D;</li>
<li>null 和 undefined 用 &#x3D;&#x3D; 进行比较涉及隐式强制类型转换，ES5规范中规定<ul>
<li>如果 x 为null ，y为 undefined，则结果为true</li>
<li>如果x为undefined,y为null，则结果为true</li>
<li>null 和 undefined 用 &#x3D;&#x3D;&#x3D; 比较时结果为false，是因为类型不同</li>
<li>typeof null -&gt; object</li>
<li>typeof undefined -&gt; undefined</li>
</ul>
</li>
<li>NaN 不自等<ul>
<li>如何判断某个值为 NaN ，isNaN</li>
</ul>
</li>
</ul>
</li>
<li>逻辑表达式<ul>
<li>或<ul>
<li>|| 有真就真</li>
</ul>
</li>
<li>与<ul>
<li>&amp;&amp;  都真才真</li>
</ul>
</li>
<li>非<ul>
<li>! 表示 “非”，也可以称为“置反运算”</li>
<li>! 是一个“单目运算符”，只需要一个操作数</li>
<li>置反运算的结果一定是布尔值</li>
<li><em><strong>!! 两个叹号是将这个值的相应布尔值展现出来</strong></em></li>
</ul>
</li>
<li>短路计算（面试）<ul>
<li><code>例：3 &amp;&amp; 6 ，结果为 6，  3 || 6 ，结果为 3</code></li>
</ul>
</li>
<li><strong>逻辑运算顺序的优先级是： 非 -&gt;  与 -&gt; 或</strong></li>
</ul>
</li>
<li>赋值表达式<ul>
<li>赋值  &#x3D;</li>
<li>快捷赋值<ul>
<li>+&#x3D;</li>
<li>-&#x3D;</li>
<li>*&#x3D;</li>
<li>&#x2F;&#x3D;</li>
<li>%&#x3D;</li>
</ul>
</li>
<li>自增运算<ul>
<li>++</li>
<li>a++ 先用再加，++a 先加再用</li>
<li><strong>面试题：var a &#x3D; 3, b&#x3D;4; alert(a++ + b++ + ++a + ++b)</strong></li>
</ul>
</li>
<li>自减运算 –</li>
</ul>
</li>
<li>综合表达式<ul>
<li><strong>运算顺序：非运算 -&gt; 数学运算 -&gt; 关系运算 -&gt; 逻辑运算</strong></li>
<li>变量的范围表示<ul>
<li>例如：验证变量 a 是否介于5到12之间。num1 &gt;&#x3D; 5 &amp;&amp; num1 &lt;&#x3D; 12</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="表达式和运算符"><a href="#表达式和运算符" class="headerlink" title="表达式和运算符"></a>表达式和运算符</h2><ol>
<li>5  +  3<ul>
<li>表达式 &#x3D; 操作数 运算符 操作数</li>
</ul>
</li>
</ol>
<h2 id="有关-IEEE754"><a href="#有关-IEEE754" class="headerlink" title="有关 IEEE754"></a>有关 IEEE754</h2><ol>
<li>Javascript 使用了 IEEE754 二进制浮点数算数标准，这会使一些个别的小数计算产生“丢失精度”问题</li>
<li>解决方法：在进行小数运算时候，要调用数字的toFixed()方法保留指定的小数位数</li>
<li>幂和开根号<ul>
<li>Javascript 没有提供幂计算、开根号的运算符。需要使用Math对象的相关方法进行计算。</li>
<li>Math.pow(2,3) 幂计算，2的3次方</li>
<li>Math.sqrt(81)  开根号运算符</li>
<li>向上取整  Math.ceil()</li>
<li>向下取整  Math.floor()</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>多媒体与语义化标签</title>
    <url>/2024/06/12/%E5%A4%9A%E5%AA%92%E4%BD%93%E4%B8%8E%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h2 id="audio标签（兼容到IE9）"><a href="#audio标签（兼容到IE9）" class="headerlink" title="audio标签（兼容到IE9）"></a>audio标签（兼容到IE9）</h2><ol>
<li>属性<ul>
<li>autoplay（某些浏览器不支持自动播放、本地自动播放是可以的）</li>
<li>loop （重复播放）</li>
</ul>
</li>
</ol>
<h2 id="video-标签（兼容到IE9）"><a href="#video-标签（兼容到IE9）" class="headerlink" title="video 标签（兼容到IE9）"></a>video 标签（兼容到IE9）</h2><ol>
<li>属性<ul>
<li>同 audio 标签</li>
<li>width 视频播放器宽度</li>
</ul>
</li>
</ol>
<h2 id="大纲标签（区块标签）"><a href="#大纲标签（区块标签）" class="headerlink" title="大纲标签（区块标签）"></a>大纲标签（区块标签）</h2><ol>
<li>section 文档的区域，语义比div大</li>
<li>article 文档的核心文章内容，会被搜索引擎主要抓取</li>
<li>nav 导航条</li>
<li>footer 页脚</li>
<li>aside 文档的非必要相关内容，比如广告等</li>
<li>main 网页核心部分</li>
<li>header 页头</li>
</ol>
<h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><ol>
<li>span 文本中的区块标签</li>
<li>b 加粗标签</li>
<li>i 斜体标签</li>
<li>u 下划线标签</li>
<li>strong 加粗标签</li>
<li>em 斜体标签</li>
<li>mark 标记标签</li>
<li>figure-figcaption 用于表示图片和图片的标题</li>
</ol>
<h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><ol>
<li>a 标签<ul>
<li>1、a 标签 anchor 锚 的首字母<br>2、hypertext reference 超文本引用<br>3、title 用于设置鼠标的悬停文本</li>
<li>属性<ul>
<li>href 超文本引用</li>
<li>target<ul>
<li>_blank 在新窗口或新标签页中打开链接。</li>
<li>_self 在父级框架中打开链接。</li>
<li>_top 在当前窗口中打开链接（默认值）。</li>
<li>_parent 在顶级框架中打开链接。</li>
</ul>
</li>
<li>title 用于设置鼠标的悬停文本</li>
</ul>
</li>
<li>说明<ul>
<li>mailto:me.test.com 邮件</li>
<li>tel:135555555555 拨打电话</li>
<li>#top 回到顶部</li>
</ul>
</li>
</ul>
</li>
<li>img 标签<ul>
<li>src</li>
<li>width、height</li>
<li>alt  alternate 替代品的缩写，它是图像的描述，不是强制性的(有利于搜索引擎优化)</li>
<li>title 鼠标悬停时候显示</li>
<li>class、style 设置样式用</li>
<li>loading  指定图像加载方式，可选值有”eager”（立即加载）和”lazy”（延迟加载）。</li>
<li>decoding  指定图像解码方式，可选值有”async”（异步解码）和”sync”（同步解码）。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次精度丢失问题</title>
    <url>/2024/05/14/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>在使用 Antd Select 组件的时候，请求详情回显 显示了一个错误的 value 值，不显示 label。</p>
</blockquote>
<p><img src="/images/20240514153755.png" alt="图片"></p>
<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><ul>
<li>后端给前端传了一个 1293435817355730946（19位） 大数值类型，前端通过 ‘’ + 、toString() 等方式进行类型转换，得到 1293435817355731000（精度丢失），Select 列表没有对应上 [类型和数值]，所以绑定不上。</li>
</ul>
<p>因为 JavaScript 中的数字类型 (Number) 有一定的精度限制。在JavaScript中,数字类型使用 IEEE 754 标准,采用 64位 浮点数表示。这种表示方式存在一些局限性:</p>
<ol>
<li>整数的精确表示范围为-2^53 + 1 到 2^53 - 1,即 -9007199254740991 到 9007199254740991（16位） 。超出这个范围的整数将丢失精度。</li>
<li>浮点数的表示也有误差,无法精确表示某些十进制小数，比如0.1。</li>
</ol>
<h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><ol>
<li>与后端开发沟通，通过字符串传递</li>
<li>使用 ES2020 BigInt 类型 </li>
<li>使用 bignumber.js、decimal.js 等第三方库解决</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>面向对象</title>
    <url>/2024/06/17/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="认识对象"><a href="#认识对象" class="headerlink" title="认识对象"></a>认识对象</h2><ol>
<li>认识对象<ul>
<li>对象（object） 是键值对的集合，表示属性和值的映射关系</li>
<li>对象的语法：k和v之间用冒号分割，每组k:v之间用逗号分割，最后一个k:v对后可以不书写逗号</li>
<li><strong>属性名是否加引号？：如果对象的属性名不符合JS标识符命名规范，则这个键名必须用引号包裹</strong></li>
<li><strong>属性的访问：可以用“点语法”访问对象中指定键的值，如果属性名不符合JS标识符命名规范，则必须用方括号的写法来访问；如果属性名以变量形式存储，则必须使用方括号形式</strong></li>
<li>属性的更改：直接使用赋值运算符对某属性复制即可更改属性</li>
<li>属性的创建：如果对象本身没有某个属性值，则用点语法赋值时，这个属性就会被创建出来</li>
<li>属性的删除：如果要删除某个对象的属性，则需要用delete操作符</li>
</ul>
</li>
<li>对象的方法<ul>
<li>如果某个属性值是函数，则它也被称之为对象的“方法”</li>
<li>方法也是函数，只不过方法是对象的“函数属性”，它需要对象打点使用</li>
</ul>
</li>
<li>对象的遍历<ul>
<li>和遍历数组类似，对象也可以被遍历，遍历对象需要使用 for…in….循环</li>
<li>使用 for…in…循环、Object.keys() 等 可以遍历对象每个键</li>
</ul>
</li>
<li><strong>对象的深浅克隆（面试）</strong><ul>
<li>基本类型值和引用类型值<ul>
<li>基本类型值<ul>
<li>数字、字符串、布尔、undefined、null</li>
<li>内存中产生新的副本</li>
<li>比较值是否相等</li>
</ul>
</li>
<li>引用类型值<ul>
<li>对象、数组等</li>
<li><strong>内存中不产生新的副本，而是让变量指向同一个对象</strong></li>
<li><strong>比较内存地址是否相同，即比较是否为同一对象</strong></li>
</ul>
</li>
</ul>
</li>
<li>对象也是引用类型值<ul>
<li>不能通过var obj2 &#x3D; obj1 这样的语法克隆一个对象</li>
<li>使用 &#x3D;&#x3D; 或者 &#x3D;&#x3D;&#x3D; 进行对象的比较时，比较的是它们是否为内存中的同一个对象，而不是比较值是否相同</li>
</ul>
</li>
<li>浅克隆：只克隆对象的“表层”，如果对象的某些属性值又是引用类型值，则不进行一步克隆它，而是引用它</li>
<li>对象的深克隆：克隆对象的全貌，无论对象的属性值是否又是引用类型值，都能将它们实现克隆</li>
<li>和数组的深克隆类似，对象的深克隆需要使用递归</li>
</ul>
</li>
</ol>
<h2 id="认识函数的的上下文"><a href="#认识函数的的上下文" class="headerlink" title="认识函数的的上下文"></a>认识函数的的上下文</h2><ol>
<li>什么是上下文<ul>
<li>函数的上下文：函数中可以使用 this 关键字，它表示函数的上下文</li>
<li>与中文中“这”类似，函数中的 this 具体指代什么必须通过调用函数时的“前言后语”来判断</li>
<li><strong>普通函数的上下文是调用使用才能确定的，并且规则很多，但是箭头函数的上下文是定义时候确定的。</strong></li>
<li><strong>函数的上下文由调用方式决定</strong><ul>
<li>同一个函数，用不同的形式调用他，则函数的上下文不同</li>
<li><strong>函数只有被调用的时候，它的上下文才能被确定</strong></li>
<li>函数的上下文（this关键字）由调用函数的方式决定，function是“运行时上下文”策略</li>
<li>函数如果不调用，则不能确定函数的上下文</li>
</ul>
</li>
</ul>
</li>
<li>6种上下文规则<ul>
<li><strong>规则1：对象打点调用它的方法函数，则函数的上下文是这个打点的对象</strong><ul>
<li>对象.方法()</li>
</ul>
</li>
<li><strong>规则2：圆括号直接调用函数，则函数上下文是window对象</strong><ul>
<li>函数()</li>
</ul>
</li>
<li><strong>规则3：数组（类数组对象）枚举出函数进行调用，上下文是这个数组（类数组对象）</strong><ul>
<li>数组<a href="">下标</a></li>
<li>类数组对象<ul>
<li>什么是类数组对象：所有键名为自然数序列（从0开始），且有length属性的对象</li>
<li>argument对象是最常见的类数组对象，它是函数的实参列表</li>
</ul>
</li>
</ul>
</li>
<li><strong>规则4：IIFE中的函数，上下文是window对象</strong><ul>
<li>IIFE：立即可执行函数</li>
<li><code>(function()&#123; ...  &#125;)()</code></li>
</ul>
</li>
<li><strong>规则5：定时器、延时器调用函数，上下文是window对象</strong><ul>
<li>setInterval(函数,时间)</li>
<li>setTimeout(函数,时间)</li>
</ul>
</li>
<li><strong>规则6：事件处理函数的上下文是绑定事件的DOM元素</strong><ul>
<li><code>DOM元素.onclick = function()&#123; ... &#125;</code></li>
</ul>
</li>
</ul>
</li>
<li>call和apply (call 呼叫,打电话，apply 应用，申请)<ul>
<li>call 和 apply 能指定函数的上下文 <ul>
<li>函数.call(上下文)</li>
<li>函数.apply(上下文)</li>
</ul>
</li>
<li>call 和 apply 区别<ul>
<li>只有在函数有参数的时候才能被体现出来</li>
<li>1、call 要用逗号罗列参数 ；2、apply 要把参数写到数组中</li>
</ul>
</li>
</ul>
</li>
<li>上下文规则总结（规则&#x2F;上下文）<ul>
<li>对象.函数() <ul>
<li>对象</li>
</ul>
</li>
<li>函数()<ul>
<li>window</li>
</ul>
</li>
<li>数组<a href="">下标</a> <ul>
<li>数组</li>
</ul>
</li>
<li>IIFE<ul>
<li>window</li>
</ul>
</li>
<li>定时器、延时器<ul>
<li>window</li>
</ul>
</li>
<li>DOM事件处理函数<ul>
<li>绑定DOM的元素</li>
</ul>
</li>
<li>call 和 apply<ul>
<li>任意指定</li>
</ul>
</li>
<li>用 new 调用函数<ul>
<li>秘密创建出的对象</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ol>
<li>用new调用函数四布走<ul>
<li>用 new 调用函数的执行步骤和它的上下文弄清楚</li>
<li><strong>JS 规定，使用new操作符调用函数会进行“四步走”：</strong><ul>
<li>1、函数体内会自动创建出一个空白对象</li>
<li>2、函数的上下文（this）会指向这个对象</li>
<li>3、函数体内的语句会执行</li>
<li>4、函数会自动返回上下文对象，即使函数没有return语句</li>
</ul>
</li>
</ul>
</li>
<li>构造函数<ul>
<li>构造函数是一种特殊类型的函数，它在创建对象时被调用。它的主要目的是初始化对象的属性和方法。在JavaScript中，构造函数通常使用关键字<code>class</code>或<code>function</code>定义，并使用<code>new</code>关键字来创建对象。构造函数可以接受参数，这些参数可以用于设置对象的属性。</li>
</ul>
</li>
<li>类和实例<ul>
<li>类好比是“蓝图”，类只描述对象会拥有哪些属性和方法，但是并不具体指明属性的值。</li>
<li>实例是具体的对象</li>
<li>JavaScript中的构造函数可以类比于OO语言中的“类”，写法的确类似，但和真正的OO语言还是有本质的不同</li>
</ul>
</li>
</ol>
<h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><ol>
<li>继承<ul>
<li>实现继承的关键在于：子类必须拥有父类的全部属性和方法，同时子类还能定义自己特有的属性和方法。</li>
<li>1、原型链继承<ul>
<li>使用方法：<ul>
<li>子类的 prototype （原型） &#x3D;  new 父类()</li>
<li><strong>让子类的构造函数的 prototype ，指向父类的一个实例</strong></li>
<li>使用 Javascript 特有的原型链特性来实现继承，是普遍的做法</li>
</ul>
</li>
<li>存在的问题：<ul>
<li>问题2：子类的构造函数中，往往需要重复定义很多超类（父类、基类）定义过的属性，即，子类的构造函数写的不够优雅</li>
<li>问题1：如果父类的属性中有引用类型值，则这个属性会被所有子类的实例共享</li>
</ul>
</li>
<li>代码示例<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Parent&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello from Parent&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>2、构造函数继承（伪造对象、经典继承）<ul>
<li>使用方法：<ul>
<li><code>Parent.call(this, name);</code></li>
</ul>
</li>
<li>存在的问题：<ul>
<li><em><strong>借用构造函数的思想非常简单：在子类构造函数的内部调用超类的构造函数，但是要注意使用 call() 绑定上下文</strong></em></li>
</ul>
</li>
<li>代码示例<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name</span>) &#123;</span><br><span class="line">   <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;Child&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>3、组合继承<ul>
<li>使用方法：<ul>
<li><code>Parent.call(this, name);</code></li>
<li><code>Child.prototype = new Parent();</code></li>
</ul>
</li>
<li>存在问题：<ul>
<li>将借用原型链和借用构造函数的技术组合到一起，叫做组合继承，也叫做伪经典继承</li>
<li>组合继承是 JavaScript 中最常用的继承方式</li>
<li>组合继承继承的问题：组合继承最大的问题就是无论在什么情况下，都会调用两次超类的构造函数：一次是在创建子类原型的时候，另一次是在子类构造函数的内部</li>
<li>构造函数继承和组合继承的区别在于： - 构造函数继承通过在子类构造函数内部调用父类构造函数来实现属性的继承，但无法继承父类原型链上的方法。 - 组合继承则是结合了原型链继承和构造函数继承的优点，通过调用父类构造函数来实现属性的继承，并且通过将子类的原型指向父类的实例来继承父类的方法。</li>
</ul>
</li>
<li>代码示例<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello from &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">   <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;Child&#x27;</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>4、原型式继承<ul>
<li>使用方法：<ul>
<li><code>var child = Object.create(parent);</code></li>
</ul>
</li>
<li>存在问题：<ul>
<li><strong>Object.create() 方法，可以根据指定的对象为原型创建出新对象，兼容性大于IE9</strong></li>
<li>在没有必要“兴师动众”地创建构造函数，而只是想让新对象与现有对象“类似”的情况下，使用 Object.create() 即可胜任，称为原型式继承</li>
<li>Object.create() 的兼容性写法<ul>
<li>如何在低版本浏览器中实现 object.create() 呢？<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">o</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建一个临时构造函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    <span class="comment">// 让这个临时构造函数的 prototype 指向o，这样一来它 new 出来的对象，__prototype__ 指向了o</span></span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = o</span><br><span class="line">    <span class="comment">// 返回 F 的实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">test</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="variable language_">this</span>.<span class="property">b</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title function_">object</span>(obj1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">__proto__</span> === obj1)  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">a</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">b</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>代码示例<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;Parent&#x27;</span>,</span><br><span class="line">   <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello from Parent&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">var</span> child = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>5、寄生式继承<ul>
<li>使用方法：<ul>
<li>编写一个函数，它接收一个参数o，返回以o为原型的新对象p，同时给p上添加预置的新方法<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> o1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;悠悠&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">o</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="title class_">Object</span>.<span class="title function_">create</span>(o)</span><br><span class="line">    p.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    p.<span class="property">sleep</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，正在睡觉`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="title function_">f</span>(o1)</span><br><span class="line">p1.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="number">88</span>)</span><br><span class="line">p1.<span class="title function_">sayHello</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="title function_">f</span>(o2)</span><br><span class="line">p2.<span class="title function_">sayHello</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p2&quot;</span>,p2)</span><br></pre></td></tr></table></figure></li>
<li>寄生式继承就是编写一个函数，它可以“增强对象”，只要把对象传入这个函数，这个函数将以此对象为“基础”创建出新对象，并为新对象赋予新的预置方法</li>
<li>在主要考虑对象而不是自定义类型和构造函数的情况下，寄生式继承也是一种有用的模式</li>
</ul>
</li>
<li>存在问题：<ul>
<li>缺点：使用寄生式继承来为对象添加函数，会由于不能做到函数复用而降低效率，即“方法没有写到 prototype 上”</li>
</ul>
</li>
<li>代码示例<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">createChild</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> child = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line">    child.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi from Child&#x27;</span>);</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> parent = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Parent&#x27;</span>,</span><br><span class="line">  <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello from Parent&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> child = <span class="title function_">createChild</span>(parent);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>6、寄生组合式继承<ul>
<li>使用方法：<ul>
<li><strong>基本思路：不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型原型的一个副本而已，本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个函数接受两个函数，子类构造函数、父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">subType, superType</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> prototype = <span class="title class_">Object</span>.<span class="title function_">create</span>(superType.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    subType.<span class="property"><span class="keyword">prototype</span></span> = prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params">name, sex, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span> = [<span class="number">33</span>, <span class="number">44</span>, <span class="number">56</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">People</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;hello 我是&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">People</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sleep</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;在睡觉&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, sex, age, no, scholl</span>) &#123;</span><br><span class="line">    <span class="title class_">People</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, sex, age)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">no</span> = no;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scholl</span> = scholl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用我们自己写的 inheritPrototype 函数，让 Student 类的 prototype 指向以 People.prototype 为原型的一个新对象</span></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Student</span>, <span class="title class_">People</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">study</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;正在学习&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">exam</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;正在考试&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="number">14025123</span>, <span class="string">&#x27;wenzhou&#x27;</span>)</span><br><span class="line"></span><br><span class="line">xiaoming.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure></li>
<li>通过借用构造函数来继承属性，通过原型链的混成形式来继承方法</li>
</ul>
</li>
<li>存在问题：<ul>
<li>寄生组合式继承的主要缺点是： 1. 虽然解决了组合继承中多次调用父类构造函数的问题，但仍然会调用一次父类构造函数来创建原型。 2. 增加了代码的复杂度，相比其他继承方式，可读性较差。</li>
</ul>
</li>
<li>代码示例<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">Child, Parent</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> prototype = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">   prototype.<span class="property">constructor</span> = <span class="title class_">Child</span>;</span><br><span class="line">   <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = prototype;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello from &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">   <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Child</span>, <span class="title class_">Parent</span>);</span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;Child&#x27;</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>instanceof 运算符<ul>
<li>用来检测“某个对象”对象是不是某个类的实例</li>
<li>底层机理：检查 Student.prototype 属性是否在 xiaoming 的原型链上（多少层都是，只要在就行）<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xiaoming instaceof <span class="title class_">Student</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>原型链的终点<ul>
<li><em><strong>原型链的终点是 Object.prototype。 Object.prototype 是所有 JavaScript 对象的顶层原型，它是原型链的终点。</strong></em></li>
</ul>
</li>
<li>在prototype上添加方法<ul>
<li>People.prototype.方法 &#x3D; function(){ … }</li>
</ul>
</li>
<li>prototype在原型链查找<ul>
<li><strong>Javascript规定：实例可以打点访问它的原型的属性和方法，这被称为“原型链查找”</strong></li>
<li>遮蔽效应：如果实例上已经有属性和方法，则不往原型链上查找</li>
</ul>
</li>
<li>什么是prototype？<ul>
<li>任何函数都有prototype属性，prototype是英语“原型”的意思</li>
<li>prototype 属性值是个对象，它默认拥有 constructor 属性指回函数</li>
<li><strong>普通函数的 prototype 属性没有任何用处，而构造函数的 prototype 属性非常有用</strong></li>
<li><em><strong>构造函数的 prototype 属性是它实例的原型</strong></em></li>
</ul>
</li>
<li>hasOwnProperty<ul>
<li>hasOwnProperty 方法可以检查对象是否真正“自己拥有”某属性或者方法<ul>
<li>实例.hasOwnProperty(‘属性|方法’)</li>
</ul>
</li>
</ul>
</li>
<li>in<ul>
<li>in 运算符只能检查某个属性或方法是否可以被对象访问，不能检查是否自己的属性或方法<ul>
<li>语法：’属性|方法’ in 实例</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="上升到面向对象"><a href="#上升到面向对象" class="headerlink" title="上升到面向对象"></a>上升到面向对象</h2><ol>
<li>面向对象的本质：定义不同的类，让类的实例工作</li>
<li>面向对象的优点：程序编写更清晰、代码结构更严密、使代码更健壮更利于维护</li>
<li>面向对象经常用到的场合：需要封装和复用性的场合（组件思维）</li>
</ol>
<h2 id="JS的内置对象"><a href="#JS的内置对象" class="headerlink" title="JS的内置对象"></a>JS的内置对象</h2><ol>
<li>Date对象<ul>
<li>使用 new Date() 即可得到当前时间的日期对象，它是 object 类型值</li>
<li>使用 new Date(2020,11,1) 即可得到指定日期的日期对象，注意第二个参数表示月份，从0开始算，11表示12月<ul>
<li>这种写法不算时区</li>
</ul>
</li>
<li>也可以是 new Date(‘2020-12-01’)  这样的写法，月份，日期不足两位要补零<ul>
<li>按照字符串的写法，月份不是从0开始算，12月就是12月</li>
<li>这种写法算时区，中国属于东八区</li>
</ul>
</li>
<li>日期对象的常见方法<ul>
<li>getDate() 得到日期 1 ~ 31</li>
<li>getDay()  得到星期 0 ~ 6</li>
<li>getMonth()  得到月份 0 ~ 11</li>
<li>getFullYear()  得到年份 </li>
<li>getHours()  得到小时数 0 ~ 23</li>
<li>getMinutes()  得到分钟数 0 ~ 59</li>
<li>getSeconds()  得到秒数 0 ~ 59</li>
</ul>
</li>
<li>时间戳<ul>
<li>时间戳表示1970年1月1日零点整距离某时刻的毫秒数</li>
<li>通过 getTime() 方法或者 Date.parse() 函数可以将日期对象变为时间戳<ul>
<li>getTime() 精确到毫秒</li>
<li>Date.parse() 精确到秒</li>
</ul>
</li>
<li>通过 new Date(时间戳)  的写法，可以将时间戳变为日期对象</li>
</ul>
</li>
</ul>
</li>
<li>包装类<ul>
<li>Number()、String()、Boolean() 分别是数字、字符串、布尔值的“包装类”</li>
<li>很多编程语言都有“包装类”的设计，包装类的目的就是为了让基本类型值可以从他们的构造函数的prototype上获得方法</li>
<li>Number()、String()、Boolean() 的实例都是 object 类型，它们的 PrimitiveValue 属性存储的它们本身值<ul>
<li>PrimitiveValue 属性不可以自己打点访问，它是一个内部属性值</li>
</ul>
</li>
<li>new 出来的基本类型值可以正常参与运算</li>
<li>Array 不能成为数组的包装类 ，包装类是对基本类型的面向对象封装，而 Array 本身就不是基本类型值（而是引用类型值），所以就谈不上包装了，undefined、null 是没有包装类的</li>
</ul>
</li>
<li>Math对象<ul>
<li>幂和开方<ul>
<li>Math.pow()、Math.sqrt()</li>
</ul>
</li>
<li>向上取整和向下取整<ul>
<li>Math.ceil()、Math.floor()</li>
</ul>
</li>
<li>四舍五入方法<ul>
<li>Math.round()</li>
</ul>
</li>
<li>Math.max() 和 Math.min()<ul>
<li>Math.max() 可以得到参数列表最大值</li>
<li>Math.min() 可以得到参数列表最小值</li>
<li>Math.max() 要求参数必须是“罗列出来”，而不能是数组<ul>
<li>用 ES6 展开运算符</li>
<li>Math.max.apply(null,arr)</li>
</ul>
</li>
</ul>
</li>
<li>随机数 Math.random()<ul>
<li>Math.random() 可以得到 0 ~ 1之间的小数</li>
<li>为了得到 [a，b] 区间内的整数，可以使用这个公式 <ul>
<li><code>parseInt(Math.random() * (b - a + 1))  + a</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="JS的内置构造函数"><a href="#JS的内置构造函数" class="headerlink" title="JS的内置构造函数"></a>JS的内置构造函数</h2><ol>
<li>Javascript 有很多内置构造函数，比如Array就是数组的构造函数，Function 就是函数类型的构造函数，Object 就是对象类型的构造函数<ul>
<li>任何数组的字面量都可以看做是Array的实例</li>
<li>拓展数组的求和方法<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拓展求和方法</span></span><br><span class="line">    <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sum</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> arr = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            count += arr[i]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">sum</span>())</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>内置的构造函数非常有用，所有该类型的方法都是定义在它的内置构造函数的 prototype 上的，我们可以给这个对象添加新的方法，从而拓展某类型的功能</li>
<li>内置构造函数的关系<ul>
<li><strong>Object.prototype 是万物原型链的终点。Javascript 中函数、数组皆为对象。</strong></li>
<li>任何函数都可以看做是 Function “new 出来的”，那我们开一个脑洞：Object 也是函数呀，它是不是 Function “new 出来的呢”？答案是肯定的</li>
</ul>
</li>
</ol>
<h2 id="重点内容"><a href="#重点内容" class="headerlink" title="** *重点内容 **"></a>** *重点内容 **</h2><ol>
<li>熟悉每条函数上下文 this 的判定规则<ul>
<li><strong>函数上下文 this 取决于函数如何被调用，而不是函数如何被定义</strong></li>
</ul>
</li>
<li>call 和 apply 的功能和区别</li>
<li>用 new 调用函数的四步走</li>
<li>什么是类和实例？面向对象编程的意义</li>
<li>prototype 和原型链查找</li>
<li>继承的实例、有哪些继承的方法？</li>
<li>使用面向对象实现小案例</li>
<li>熟练掌握 Math、Date等 JS 内置对象</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>边框与圆角</title>
    <url>/2024/06/06/%E8%BE%B9%E6%A1%86%E4%B8%8E%E5%9C%86%E8%A7%92/</url>
    <content><![CDATA[<h2 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h2><ol>
<li><code>box-shadow: 10px 20px 30px rgba(0, 0, 0, .4);</code></li>
<li>inset（内阴影，可选），x偏移，y偏移，模糊量，阴影延展（可选），颜色</li>
<li>可以用逗号隔开多个阴影<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">box-shadow</span>: inset <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>),<span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">#ff0000</span>;</span><br><span class="line">       <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><ol>
<li><code>border-top</code></li>
<li><code>border-bottom</code></li>
<li><code>border-left</code></li>
<li><code>border-right</code></li>
<li><code>border-方向-style 边框线形</code></li>
<li><code>border-方向-width 边框宽度</code></li>
<li><code>border-方向-color 边框颜色</code></li>
<li><code>border-方向:none 去掉边框</code></li>
<li><code>利用border制作三角形</code><ul>
<li><code>width: 0; height: 0; border: 20px solid transparent; margin-top: 50px; border-top-color: #ff0000;</code></li>
</ul>
</li>
<li><code>边框的三要素</code><ul>
<li><em><strong>线宽度、线型、线颜色</strong></em><ul>
<li>solid 实线</li>
<li>dotted 虚线（圆）</li>
<li>double 双边</li>
<li>dashed 虚线（矩形）</li>
</ul>
</li>
<li><code>border:1px solid #ff0</code></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>表格标签</title>
    <url>/2024/06/12/%E8%A1%A8%E6%A0%BC%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><ol>
<li>tr</li>
<li>td<ul>
<li>colspan 用来设置 td 或者 th 的列跨度</li>
<li>rowspan 用来设置 td 或者 th 的行跨度</li>
</ul>
</li>
<li>thead&#x2F;th<ul>
<li>标题小格（td 和 th 是同一级别的）</li>
<li>colspan  用来设置 td 或者 th 的列跨度</li>
<li>rowspan  用来设置 td 或者 th 的行跨度</li>
</ul>
</li>
<li>tbody</li>
<li>tfooter</li>
<li>caption<ul>
<li>表格的标题</li>
</ul>
</li>
</ol>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ol>
<li>border <ul>
<li>1</li>
<li>2</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>过渡与动画</title>
    <url>/2024/06/12/%E8%BF%87%E6%B8%A1%E4%B8%8E%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h2 id="过渡（最低支持-IE10）"><a href="#过渡（最低支持-IE10）" class="headerlink" title="过渡（最低支持 IE10）"></a>过渡（最低支持 IE10）</h2><ol>
<li>过渡的基本使用<ul>
<li>transition 过渡属性是CSS3浓墨重彩的特性，过渡可以为一个元素在不同的样式之间变化自动添加“补间动画”</li>
<li>优点：动画更细腻，内存开销小</li>
<li>transition: width 1s linear 0s;<ul>
<li>如果所有属性要参与过渡，可以写 all</li>
</ul>
</li>
<li><em><strong>参数说明：什么属性需要过渡，动画时长，变化速度曲线，延迟时间</strong></em><br>  过渡的四个小属性<ul>
<li>transition-duration 动画时间</li>
<li>transition-property 哪些属性要过渡</li>
<li>transition-timing-function 动画变化曲线（缓动效果）<ul>
<li>ease</li>
<li>linear</li>
<li>ease-in</li>
<li>ease-out</li>
<li>ease-in-out</li>
<li>贝塞尔曲线<ul>
<li>可以通过 <a href="https://cubic-bezier.com/">https://cubic-bezier.com/</a> 这个网址自定义动画缓动参数</li>
</ul>
</li>
</ul>
</li>
<li>transition-delay 延迟时间</li>
</ul>
</li>
<li>哪些属性可以参与过渡？<ul>
<li>所有数值属性都可以参与过渡，比如<ul>
<li>width</li>
<li>height</li>
<li>left</li>
<li>top</li>
<li>border-radius</li>
</ul>
</li>
<li>背景颜色和文字颜色都可以被过渡</li>
<li>所有变形（包括2D和3D）都能被过渡</li>
</ul>
</li>
</ul>
</li>
<li>过渡的缓动效果（参考 transition-timing-function 属性）</li>
</ol>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ol>
<li>动画的定义和调用<ul>
<li><p>可以使用 @keyframes 来定义动画，keyframes 表示“关键帧”，在项目上线前，要补上@-webkit-这样的私有前缀</p>
</li>
<li><p>定义动画后，就可以用 animation 属性调用动画</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>动画的定义<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@keyframes</span> r&#123;</span></span><br><span class="line"><span class="language-css">          <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">              <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">          &#125;</span></span><br><span class="line"><span class="language-css">          <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">              <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span></span><br><span class="line"><span class="language-css">          &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">animation</span>: r <span class="number">1s</span> linear <span class="number">0s</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>animation: r 1s ease 3s 3; </code></p>
<ul>
<li>动画的参数：动画的名称，执行的时间，动画效果，延迟时间，执行次数</li>
<li>如果想永远设置执行就是 infinite 属性</li>
<li>如果想让动画的第2、4、6…..（偶数次）自动逆向执行，那么要加上 alternate 参数即可</li>
<li>如果想让动画停止在最后结束状态，那么要加上 forwards</li>
</ul>
</li>
<li><p>多关键帧动画</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> changeColor &#123;</span><br><span class="line">     <span class="number">0%</span> &#123;</span><br><span class="line">         <span class="attribute">background-color</span>: red;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="number">50%</span> &#123;</span><br><span class="line">         <span class="attribute">background-color</span>: yellow;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="number">100%</span> &#123;</span><br><span class="line">         <span class="attribute">background-color</span>: aqua;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
